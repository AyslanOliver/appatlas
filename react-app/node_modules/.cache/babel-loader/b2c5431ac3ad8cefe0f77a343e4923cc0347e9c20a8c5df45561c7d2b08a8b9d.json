{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport BluetoothPrinter from '../services/bluetoothPrinter';\nconst useBluetoothPrinter = () => {\n  _s();\n  const [printer, setPrinter] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectedDevice, setConnectedDevice] = useState(null);\n  const [error, setError] = useState(null);\n  const [isBluetoothAvailable, setIsBluetoothAvailable] = useState(false);\n\n  // Inicializar printer e verificar disponibilidade do Bluetooth\n  useEffect(() => {\n    const initPrinter = async () => {\n      try {\n        const printerInstance = new BluetoothPrinter();\n        setPrinter(printerInstance);\n        const available = await printerInstance.isBluetoothAvailable();\n        setIsBluetoothAvailable(available);\n        if (!available) {\n          setError('Bluetooth não está disponível neste dispositivo');\n        }\n      } catch (err) {\n        setError('Erro ao inicializar impressora: ' + err.message);\n      }\n    };\n    initPrinter();\n  }, []);\n\n  // Conectar à impressora\n  const connect = useCallback(async () => {\n    if (!printer || !isBluetoothAvailable) {\n      setError('Impressora não inicializada ou Bluetooth indisponível');\n      return false;\n    }\n    setIsConnecting(true);\n    setError(null);\n    try {\n      const device = await printer.connect();\n      setConnectedDevice(device);\n      setIsConnected(true);\n      setError(null);\n      return true;\n    } catch (err) {\n      setError('Erro ao conectar: ' + err.message);\n      setIsConnected(false);\n      return false;\n    } finally {\n      setIsConnecting(false);\n    }\n  }, [printer, isBluetoothAvailable]);\n\n  // Desconectar da impressora\n  const disconnect = useCallback(async () => {\n    if (!printer) return;\n    try {\n      await printer.disconnect();\n      setIsConnected(false);\n      setConnectedDevice(null);\n      setError(null);\n    } catch (err) {\n      setError('Erro ao desconectar: ' + err.message);\n    }\n  }, [printer]);\n\n  // Imprimir texto simples\n  const printText = useCallback(async text => {\n    if (!printer || !isConnected) {\n      setError('Impressora não conectada');\n      return false;\n    }\n    try {\n      await printer.printText(text);\n      return true;\n    } catch (err) {\n      setError('Erro ao imprimir: ' + err.message);\n      return false;\n    }\n  }, [printer, isConnected]);\n\n  // Imprimir pedido completo\n  const printOrder = useCallback(async pedido => {\n    if (!printer || !isConnected) {\n      setError('Impressora não conectada');\n      return false;\n    }\n    try {\n      // Cabeçalho\n      await printer.printText('PIZZARIA ATLAS\\n', {\n        align: 'center',\n        bold: true\n      });\n      await printer.printSeparator();\n\n      // Informações do pedido\n      await printer.printText(`PEDIDO #${pedido.id}\\n`, {\n        bold: true\n      });\n      await printer.printText(`Data: ${new Date(pedido.data_pedido).toLocaleString()}\\n`);\n      await printer.printText(`Cliente: ${pedido.nome_cliente}\\n`);\n      if (pedido.telefone) {\n        await printer.printText(`Telefone: ${pedido.telefone}\\n`);\n      }\n      if (pedido.endereco) {\n        await printer.printText(`Endereço: ${pedido.endereco}\\n`);\n      }\n      await printer.printSeparator();\n\n      // Itens do pedido\n      await printer.printText('ITENS:\\n', {\n        bold: true\n      });\n      let total = 0;\n      for (const item of pedido.itens) {\n        const subtotal = item.quantidade * item.preco_unitario;\n        total += subtotal;\n        await printer.printText(`${item.quantidade}x ${item.nome_produto}\\n`);\n        await printer.printText(`  R$ ${item.preco_unitario.toFixed(2)} cada\\n`);\n        await printer.printText(`  Subtotal: R$ ${subtotal.toFixed(2)}\\n`);\n        if (item.observacoes) {\n          await printer.printText(`  Obs: ${item.observacoes}\\n`);\n        }\n        await printer.printText('\\n');\n      }\n      await printer.printSeparator();\n\n      // Total\n      await printer.printText(`TOTAL: R$ ${total.toFixed(2)}\\n`, {\n        bold: true,\n        align: 'center',\n        size: 'large'\n      });\n      await printer.printSeparator();\n\n      // Status\n      await printer.printText(`Status: ${pedido.status}\\n`, {\n        bold: true\n      });\n      if (pedido.observacoes_gerais) {\n        await printer.printText(`\\nObservações:\\n${pedido.observacoes_gerais}\\n`);\n      }\n\n      // Rodapé\n      await printer.printText('\\nObrigado pela preferência!\\n', {\n        align: 'center'\n      });\n      await printer.feedAndCut();\n      return true;\n    } catch (err) {\n      setError('Erro ao imprimir pedido: ' + err.message);\n      return false;\n    }\n  }, [printer, isConnected]);\n\n  // Imprimir recibo de cozinha (versão simplificada)\n  const printKitchenReceipt = useCallback(async pedido => {\n    if (!printer || !isConnected) {\n      setError('Impressora não conectada');\n      return false;\n    }\n    try {\n      // Cabeçalho da cozinha\n      await printer.printText('=== COZINHA ===\\n', {\n        align: 'center',\n        bold: true\n      });\n      await printer.printText(`PEDIDO #${pedido.id}\\n`, {\n        bold: true,\n        size: 'large'\n      });\n      await printer.printText(`${new Date(pedido.data_pedido).toLocaleString()}\\n`);\n      await printer.printSeparator();\n\n      // Itens para preparo\n      for (const item of pedido.itens) {\n        await printer.printText(`${item.quantidade}x ${item.nome_produto}\\n`, {\n          bold: true\n        });\n        if (item.observacoes) {\n          await printer.printText(`*** ${item.observacoes} ***\\n`);\n        }\n        await printer.printText('\\n');\n      }\n      if (pedido.observacoes_gerais) {\n        await printer.printSeparator();\n        await printer.printText('OBSERVAÇÕES GERAIS:\\n', {\n          bold: true\n        });\n        await printer.printText(`${pedido.observacoes_gerais}\\n`);\n      }\n      await printer.feedAndCut();\n      return true;\n    } catch (err) {\n      setError('Erro ao imprimir recibo da cozinha: ' + err.message);\n      return false;\n    }\n  }, [printer, isConnected]);\n\n  // Teste de impressão\n  const printTest = useCallback(async () => {\n    if (!printer || !isConnected) {\n      setError('Impressora não conectada');\n      return false;\n    }\n    try {\n      await printer.printText('TESTE DE IMPRESSÃO\\n', {\n        align: 'center',\n        bold: true\n      });\n      await printer.printSeparator();\n      await printer.printText('Esta é uma impressão de teste.\\n');\n      await printer.printText(`Data: ${new Date().toLocaleString()}\\n`);\n      await printer.printSeparator();\n      await printer.printText('Impressora funcionando corretamente!\\n', {\n        align: 'center'\n      });\n      await printer.feedAndCut();\n      return true;\n    } catch (err) {\n      setError('Erro no teste de impressão: ' + err.message);\n      return false;\n    }\n  }, [printer, isConnected]);\n  return {\n    // Estados\n    isConnected,\n    isConnecting,\n    connectedDevice,\n    error,\n    isBluetoothAvailable,\n    // Funções\n    connect,\n    disconnect,\n    printText,\n    printOrder,\n    printKitchenReceipt,\n    printTest,\n    // Limpar erro\n    clearError: () => setError(null)\n  };\n};\n_s(useBluetoothPrinter, \"Y0OY3J0dtNvAKCaEoOHqA9qonws=\");\nexport default useBluetoothPrinter;","map":{"version":3,"names":["useState","useEffect","useCallback","BluetoothPrinter","useBluetoothPrinter","_s","printer","setPrinter","isConnected","setIsConnected","isConnecting","setIsConnecting","connectedDevice","setConnectedDevice","error","setError","isBluetoothAvailable","setIsBluetoothAvailable","initPrinter","printerInstance","available","err","message","connect","device","disconnect","printText","text","printOrder","pedido","align","bold","printSeparator","id","Date","data_pedido","toLocaleString","nome_cliente","telefone","endereco","total","item","itens","subtotal","quantidade","preco_unitario","nome_produto","toFixed","observacoes","size","status","observacoes_gerais","feedAndCut","printKitchenReceipt","printTest","clearError"],"sources":["E:/appatlas/react-app/src/hooks/useBluetoothPrinter.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport BluetoothPrinter from '../services/bluetoothPrinter';\n\nconst useBluetoothPrinter = () => {\n  const [printer, setPrinter] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectedDevice, setConnectedDevice] = useState(null);\n  const [error, setError] = useState(null);\n  const [isBluetoothAvailable, setIsBluetoothAvailable] = useState(false);\n\n  // Inicializar printer e verificar disponibilidade do Bluetooth\n  useEffect(() => {\n    const initPrinter = async () => {\n      try {\n        const printerInstance = new BluetoothPrinter();\n        setPrinter(printerInstance);\n        \n        const available = await printerInstance.isBluetoothAvailable();\n        setIsBluetoothAvailable(available);\n        \n        if (!available) {\n          setError('Bluetooth não está disponível neste dispositivo');\n        }\n      } catch (err) {\n        setError('Erro ao inicializar impressora: ' + err.message);\n      }\n    };\n\n    initPrinter();\n  }, []);\n\n  // Conectar à impressora\n  const connect = useCallback(async () => {\n    if (!printer || !isBluetoothAvailable) {\n      setError('Impressora não inicializada ou Bluetooth indisponível');\n      return false;\n    }\n\n    setIsConnecting(true);\n    setError(null);\n\n    try {\n      const device = await printer.connect();\n      setConnectedDevice(device);\n      setIsConnected(true);\n      setError(null);\n      return true;\n    } catch (err) {\n      setError('Erro ao conectar: ' + err.message);\n      setIsConnected(false);\n      return false;\n    } finally {\n      setIsConnecting(false);\n    }\n  }, [printer, isBluetoothAvailable]);\n\n  // Desconectar da impressora\n  const disconnect = useCallback(async () => {\n    if (!printer) return;\n\n    try {\n      await printer.disconnect();\n      setIsConnected(false);\n      setConnectedDevice(null);\n      setError(null);\n    } catch (err) {\n      setError('Erro ao desconectar: ' + err.message);\n    }\n  }, [printer]);\n\n  // Imprimir texto simples\n  const printText = useCallback(async (text) => {\n    if (!printer || !isConnected) {\n      setError('Impressora não conectada');\n      return false;\n    }\n\n    try {\n      await printer.printText(text);\n      return true;\n    } catch (err) {\n      setError('Erro ao imprimir: ' + err.message);\n      return false;\n    }\n  }, [printer, isConnected]);\n\n  // Imprimir pedido completo\n  const printOrder = useCallback(async (pedido) => {\n    if (!printer || !isConnected) {\n      setError('Impressora não conectada');\n      return false;\n    }\n\n    try {\n      // Cabeçalho\n      await printer.printText('PIZZARIA ATLAS\\n', { align: 'center', bold: true });\n      await printer.printSeparator();\n      \n      // Informações do pedido\n      await printer.printText(`PEDIDO #${pedido.id}\\n`, { bold: true });\n      await printer.printText(`Data: ${new Date(pedido.data_pedido).toLocaleString()}\\n`);\n      await printer.printText(`Cliente: ${pedido.nome_cliente}\\n`);\n      \n      if (pedido.telefone) {\n        await printer.printText(`Telefone: ${pedido.telefone}\\n`);\n      }\n      \n      if (pedido.endereco) {\n        await printer.printText(`Endereço: ${pedido.endereco}\\n`);\n      }\n      \n      await printer.printSeparator();\n      \n      // Itens do pedido\n      await printer.printText('ITENS:\\n', { bold: true });\n      \n      let total = 0;\n      for (const item of pedido.itens) {\n        const subtotal = item.quantidade * item.preco_unitario;\n        total += subtotal;\n        \n        await printer.printText(`${item.quantidade}x ${item.nome_produto}\\n`);\n        await printer.printText(`  R$ ${item.preco_unitario.toFixed(2)} cada\\n`);\n        await printer.printText(`  Subtotal: R$ ${subtotal.toFixed(2)}\\n`);\n        \n        if (item.observacoes) {\n          await printer.printText(`  Obs: ${item.observacoes}\\n`);\n        }\n        await printer.printText('\\n');\n      }\n      \n      await printer.printSeparator();\n      \n      // Total\n      await printer.printText(`TOTAL: R$ ${total.toFixed(2)}\\n`, { \n        bold: true, \n        align: 'center',\n        size: 'large'\n      });\n      \n      await printer.printSeparator();\n      \n      // Status\n      await printer.printText(`Status: ${pedido.status}\\n`, { bold: true });\n      \n      if (pedido.observacoes_gerais) {\n        await printer.printText(`\\nObservações:\\n${pedido.observacoes_gerais}\\n`);\n      }\n      \n      // Rodapé\n      await printer.printText('\\nObrigado pela preferência!\\n', { align: 'center' });\n      await printer.feedAndCut();\n      \n      return true;\n    } catch (err) {\n      setError('Erro ao imprimir pedido: ' + err.message);\n      return false;\n    }\n  }, [printer, isConnected]);\n\n  // Imprimir recibo de cozinha (versão simplificada)\n  const printKitchenReceipt = useCallback(async (pedido) => {\n    if (!printer || !isConnected) {\n      setError('Impressora não conectada');\n      return false;\n    }\n\n    try {\n      // Cabeçalho da cozinha\n      await printer.printText('=== COZINHA ===\\n', { align: 'center', bold: true });\n      await printer.printText(`PEDIDO #${pedido.id}\\n`, { bold: true, size: 'large' });\n      await printer.printText(`${new Date(pedido.data_pedido).toLocaleString()}\\n`);\n      await printer.printSeparator();\n      \n      // Itens para preparo\n      for (const item of pedido.itens) {\n        await printer.printText(`${item.quantidade}x ${item.nome_produto}\\n`, { bold: true });\n        \n        if (item.observacoes) {\n          await printer.printText(`*** ${item.observacoes} ***\\n`);\n        }\n        await printer.printText('\\n');\n      }\n      \n      if (pedido.observacoes_gerais) {\n        await printer.printSeparator();\n        await printer.printText('OBSERVAÇÕES GERAIS:\\n', { bold: true });\n        await printer.printText(`${pedido.observacoes_gerais}\\n`);\n      }\n      \n      await printer.feedAndCut();\n      return true;\n    } catch (err) {\n      setError('Erro ao imprimir recibo da cozinha: ' + err.message);\n      return false;\n    }\n  }, [printer, isConnected]);\n\n  // Teste de impressão\n  const printTest = useCallback(async () => {\n    if (!printer || !isConnected) {\n      setError('Impressora não conectada');\n      return false;\n    }\n\n    try {\n      await printer.printText('TESTE DE IMPRESSÃO\\n', { align: 'center', bold: true });\n      await printer.printSeparator();\n      await printer.printText('Esta é uma impressão de teste.\\n');\n      await printer.printText(`Data: ${new Date().toLocaleString()}\\n`);\n      await printer.printSeparator();\n      await printer.printText('Impressora funcionando corretamente!\\n', { align: 'center' });\n      await printer.feedAndCut();\n      return true;\n    } catch (err) {\n      setError('Erro no teste de impressão: ' + err.message);\n      return false;\n    }\n  }, [printer, isConnected]);\n\n  return {\n    // Estados\n    isConnected,\n    isConnecting,\n    connectedDevice,\n    error,\n    isBluetoothAvailable,\n    \n    // Funções\n    connect,\n    disconnect,\n    printText,\n    printOrder,\n    printKitchenReceipt,\n    printTest,\n    \n    // Limpar erro\n    clearError: () => setError(null)\n  };\n};\n\nexport default useBluetoothPrinter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}