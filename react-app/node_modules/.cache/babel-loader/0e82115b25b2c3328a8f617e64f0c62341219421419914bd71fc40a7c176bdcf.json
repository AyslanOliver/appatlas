{"ast":null,"code":"import axios from 'axios';\n\n// Configuração da API - função que retorna a URL baseada no ambiente atual\nfunction getApiUrl() {\n  console.log('=== DEBUG getApiUrl ===');\n\n  // Se estiver rodando no Cordova (protocolo file:), usar a API do InfinityFree\n  if (typeof window !== 'undefined' && window.location.protocol === 'file:') {\n    console.log('Ambiente detectado: Cordova');\n    return 'https://rotaexpress.free.nf'; // URL do seu domínio\n  }\n\n  // Detectar o ambiente baseado no hostname\n  if (typeof window !== 'undefined') {\n    const hostname = window.location.hostname;\n    const protocol = window.location.protocol;\n    const port = window.location.port;\n    console.log('Hostname:', hostname);\n    console.log('Protocol:', protocol);\n    console.log('Port:', port);\n\n    // Para desenvolvimento local, usar servidor local\n    const isLocal = hostname === 'localhost' || hostname === '127.0.0.1';\n    if (isLocal) {\n      console.log('Ambiente detectado: Local');\n      const apiUrl = 'http://localhost:3001';\n      console.log('URL da API retornada:', apiUrl);\n      return apiUrl;\n    }\n\n    // Se estiver no InfinityFree, usar a API local\n    if (hostname.includes('infinityfreeapp.com') || hostname.includes('epizy.com') || hostname === 'rotaexpress.free.nf' || hostname.includes('free.nf')) {\n      console.log('Ambiente detectado: InfinityFree');\n      console.log('URL da API retornada:', window.location.origin);\n      return window.location.origin;\n    }\n  }\n\n  // Fallback para InfinityFree\n  console.log('Ambiente detectado: Fallback');\n  return 'https://rotaexpress.free.nf'; // URL do seu domínio\n}\n\n// Configuração do axios\nconst API_URL = getApiUrl();\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 15000,\n  // Aumentado para InfinityFree\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Debug: Log da configuração da API\nconsole.log('API_URL configurado:', API_URL);\nif (typeof window !== 'undefined') {\n  console.log('Protocolo atual:', window.location.protocol);\n  console.log('Hostname atual:', window.location.hostname);\n  console.log('Ambiente detectado:', window.location.protocol === 'file:' ? 'Cordova' : window.location.hostname.includes('infinityfreeapp.com') || window.location.hostname.includes('epizy.com') || window.location.hostname === 'rotaexpress.free.nf' ? 'InfinityFree' : window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' ? 'Local' : 'Outro');\n}\nconsole.log('Build timestamp:', new Date().toISOString());\n\n// Função para testar a conexão com a API\nexport const testarConexao = async () => {\n  try {\n    const response = await api.get('/api/test.php');\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao testar conexão:', error);\n    throw error;\n  }\n};\n\n// Funções para gerenciamento de produtos\nexport const getProdutos = async () => {\n  try {\n    const response = await api.get('/api/produtos.php');\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar produtos:', error);\n    throw error;\n  }\n};\nexport const criarProduto = async dados => {\n  try {\n    const response = await api.post('/api/produtos.php', dados);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao criar produto:', error);\n    throw error;\n  }\n};\nexport const atualizarProduto = async (id, dados) => {\n  try {\n    const response = await api.put(`/api/produtos.php?id=${id}`, dados);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao atualizar produto:', error);\n    throw error;\n  }\n};\nexport const deletarProduto = async id => {\n  try {\n    const response = await api.delete(`/api/produtos.php?id=${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao deletar produto:', error);\n    throw error;\n  }\n};\n\n// Funções para gerenciamento de pedidos\nexport const getPedidos = async () => {\n  try {\n    const response = await api.get('/api/pedidos.php');\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar pedidos:', error);\n    throw error;\n  }\n};\nexport const getPedidoById = async id => {\n  try {\n    const response = await api.get(`/api/pedidos/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar pedido:', error);\n    throw error;\n  }\n};\nexport const criarPedido = async pedido => {\n  try {\n    const response = await api.post('/api/pedidos.php', pedido);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao criar pedido:', error);\n    throw error;\n  }\n};\nexport const atualizarPedido = async (id, dados) => {\n  try {\n    const response = await api.put(`/api/pedidos/${id}`, dados);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao atualizar pedido:', error);\n    throw error;\n  }\n};\nexport const deletarPedido = async id => {\n  try {\n    const response = await api.delete(`/api/pedidos.php?id=${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao deletar pedido:', error);\n    throw error;\n  }\n};\nexport const deletarTodosPedidos = async () => {\n  try {\n    const response = await api.delete('/api/pedidos.php?deleteAll=true');\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao deletar todos os pedidos:', error);\n    throw error;\n  }\n};\nexport const getCardapio = async (tipo = '') => {\n  try {\n    const url = tipo ? `/api/cardapio.php?tipo=${tipo}` : '/api/cardapio.php';\n    const response = await api.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar cardápio:', error);\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","getApiUrl","console","log","window","location","protocol","hostname","port","isLocal","apiUrl","includes","origin","API_URL","api","create","baseURL","timeout","headers","Date","toISOString","testarConexao","response","get","data","error","getProdutos","criarProduto","dados","post","atualizarProduto","id","put","deletarProduto","delete","getPedidos","getPedidoById","criarPedido","pedido","atualizarPedido","deletarPedido","deletarTodosPedidos","getCardapio","tipo","url"],"sources":["E:/appatlas/react-app/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuração da API - função que retorna a URL baseada no ambiente atual\nfunction getApiUrl() {\n    console.log('=== DEBUG getApiUrl ===');\n    \n    // Se estiver rodando no Cordova (protocolo file:), usar a API do InfinityFree\n    if (typeof window !== 'undefined' && window.location.protocol === 'file:') {\n        console.log('Ambiente detectado: Cordova');\n        return 'https://rotaexpress.free.nf'; // URL do seu domínio\n    }\n    \n    // Detectar o ambiente baseado no hostname\n    if (typeof window !== 'undefined') {\n        const hostname = window.location.hostname;\n        const protocol = window.location.protocol;\n        const port = window.location.port;\n        \n        console.log('Hostname:', hostname);\n        console.log('Protocol:', protocol);\n        console.log('Port:', port);\n        \n        // Para desenvolvimento local, usar servidor local\n        const isLocal = hostname === 'localhost' || hostname === '127.0.0.1';\n        if (isLocal) {\n            console.log('Ambiente detectado: Local');\n            const apiUrl = 'http://localhost:3001';\n            console.log('URL da API retornada:', apiUrl);\n            return apiUrl;\n        }\n        \n        // Se estiver no InfinityFree, usar a API local\n        if (hostname.includes('infinityfreeapp.com') || hostname.includes('epizy.com') || hostname === 'rotaexpress.free.nf' || hostname.includes('free.nf')) {\n            console.log('Ambiente detectado: InfinityFree');\n            console.log('URL da API retornada:', window.location.origin);\n            return window.location.origin;\n        }\n    }\n    \n    // Fallback para InfinityFree\n    console.log('Ambiente detectado: Fallback');\n    return 'https://rotaexpress.free.nf'; // URL do seu domínio\n}\n\n// Configuração do axios\nconst API_URL = getApiUrl();\nconst api = axios.create({\n    baseURL: API_URL,\n    timeout: 15000, // Aumentado para InfinityFree\n    headers: {\n        'Content-Type': 'application/json',\n    }\n});\n\n// Debug: Log da configuração da API\nconsole.log('API_URL configurado:', API_URL);\nif (typeof window !== 'undefined') {\n    console.log('Protocolo atual:', window.location.protocol);\n    console.log('Hostname atual:', window.location.hostname);\n    console.log('Ambiente detectado:', \n        window.location.protocol === 'file:' ? 'Cordova' : \n        window.location.hostname.includes('infinityfreeapp.com') || window.location.hostname.includes('epizy.com') || window.location.hostname === 'rotaexpress.free.nf' ? 'InfinityFree' : \n        window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' ? 'Local' : 'Outro'\n    );\n}\nconsole.log('Build timestamp:', new Date().toISOString());\n\n// Função para testar a conexão com a API\nexport const testarConexao = async () => {\n    try {\n        const response = await api.get('/api/test.php');\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao testar conexão:', error);\n        throw error;\n    }\n};\n\n// Funções para gerenciamento de produtos\nexport const getProdutos = async () => {\n    try {\n        const response = await api.get('/api/produtos.php');\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao buscar produtos:', error);\n        throw error;\n    }\n};\n\nexport const criarProduto = async (dados) => {\n    try {\n        const response = await api.post('/api/produtos.php', dados);\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao criar produto:', error);\n        throw error;\n    }\n};\n\nexport const atualizarProduto = async (id, dados) => {\n    try {\n        const response = await api.put(`/api/produtos.php?id=${id}`, dados);\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao atualizar produto:', error);\n        throw error;\n    }\n};\n\nexport const deletarProduto = async (id) => {\n    try {\n        const response = await api.delete(`/api/produtos.php?id=${id}`);\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao deletar produto:', error);\n        throw error;\n    }\n};\n\n// Funções para gerenciamento de pedidos\nexport const getPedidos = async () => {\n    try {\n        const response = await api.get('/api/pedidos.php');\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao buscar pedidos:', error);\n        throw error;\n    }\n};\n\nexport const getPedidoById = async (id) => {\n    try {\n        const response = await api.get(`/api/pedidos/${id}`);\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao buscar pedido:', error);\n        throw error;\n    }\n};\n\nexport const criarPedido = async (pedido) => {\n    try {\n        const response = await api.post('/api/pedidos.php', pedido);\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao criar pedido:', error);\n        throw error;\n    }\n};\n\nexport const atualizarPedido = async (id, dados) => {\n    try {\n        const response = await api.put(`/api/pedidos/${id}`, dados);\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao atualizar pedido:', error);\n        throw error;\n    }\n};\n\nexport const deletarPedido = async (id) => {\n    try {\n        const response = await api.delete(`/api/pedidos.php?id=${id}`);\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao deletar pedido:', error);\n        throw error;\n    }\n};\n\nexport const deletarTodosPedidos = async () => {\n    try {\n        const response = await api.delete('/api/pedidos.php?deleteAll=true');\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao deletar todos os pedidos:', error);\n        throw error;\n    }\n};\n\nexport const getCardapio = async (tipo = '') => {\n    try {\n        const url = tipo ? `/api/cardapio.php?tipo=${tipo}` : '/api/cardapio.php';\n        const response = await api.get(url);\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao buscar cardápio:', error);\n        throw error;\n    }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}