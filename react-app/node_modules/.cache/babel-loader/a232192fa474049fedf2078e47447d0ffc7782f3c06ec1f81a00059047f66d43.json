{"ast":null,"code":"/**\n * Serviço de Impressão Bluetooth para Impressoras Térmicas\n * Baseado na Web Bluetooth API para dispositivos Android\n */\n\nclass BluetoothPrinterService {\n  constructor() {\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristic = null;\n    this.isConnected = false;\n    this.autoReconnect = true;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n\n    // UUIDs comuns para impressoras térmicas ESC/POS\n    this.serviceUUIDs = ['000018f0-0000-1000-8000-00805f9b34fb',\n    // Nordic UART Service\n    '49535343-fe7d-4ae5-8fa9-9fafd205e455',\n    // Microchip Data Service\n    '6e400001-b5a3-f393-e0a9-e50e24dcca9e',\n    // Nordic UART Service Alternative\n    'serial_port' // Fallback para porta serial\n    ];\n    this.characteristicUUIDs = ['000018f1-0000-1000-8000-00805f9b34fb',\n    // Nordic UART TX\n    '49535343-1e4d-4bd9-ba61-23c647249616',\n    // Microchip Data TX\n    '6e400002-b5a3-f393-e0a9-e50e24dcca9e' // Nordic UART TX Alternative\n    ];\n\n    // Configurações da impressora\n    this.printerConfig = {\n      width: 48,\n      // Largura em caracteres (58mm = 48 chars)\n      encoding: 'utf-8',\n      language: 'esc-pos'\n    };\n\n    // Event listeners\n    this.eventListeners = {\n      connected: [],\n      disconnected: [],\n      error: [],\n      printing: []\n    };\n  }\n\n  /**\n   * Verifica se o navegador suporta Web Bluetooth\n   */\n  isBluetoothSupported() {\n    if (!navigator.bluetooth) {\n      console.error('Web Bluetooth não é suportado neste navegador');\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Verifica se o Bluetooth está disponível\n   */\n  async isBluetoothAvailable() {\n    if (!this.isBluetoothSupported()) {\n      throw new Error('Web Bluetooth não é suportado neste navegador');\n    }\n    try {\n      const availability = await navigator.bluetooth.getAvailability();\n      if (!availability) {\n        throw new Error('Bluetooth não está disponível neste dispositivo');\n      }\n      return true;\n    } catch (error) {\n      throw new Error('Erro ao verificar disponibilidade do Bluetooth: ' + error.message);\n    }\n  }\n\n  /**\n   * Lista dispositivos Bluetooth pareados (simulado para Web Bluetooth)\n   */\n  async listPairedDevices() {\n    if (!this.isBluetoothSupported()) {\n      throw new Error('Web Bluetooth não é suportado neste navegador');\n    }\n    try {\n      // Web Bluetooth API não permite listar dispositivos pareados\n      // Retorna uma lista vazia e instrui o usuário a conectar manualmente\n      console.log('Web Bluetooth API não permite listar dispositivos pareados automaticamente');\n      return [];\n    } catch (error) {\n      throw new Error('Erro ao listar dispositivos: ' + error.message);\n    }\n  }\n\n  /**\n   * Habilita o Bluetooth (não aplicável para Web Bluetooth)\n   */\n  async enableBluetooth() {\n    if (!this.isBluetoothSupported()) {\n      throw new Error('Web Bluetooth não é suportado neste navegador');\n    }\n    try {\n      // Web Bluetooth API não permite habilitar Bluetooth programaticamente\n      // O usuário deve habilitar manualmente nas configurações do dispositivo\n      const availability = await navigator.bluetooth.getAvailability();\n      if (!availability) {\n        throw new Error('Por favor, habilite o Bluetooth nas configurações do seu dispositivo');\n      }\n      return true;\n    } catch (error) {\n      throw new Error('Erro ao verificar Bluetooth: ' + error.message);\n    }\n  }\n\n  /**\n   * Conecta à impressora Bluetooth\n   */\n  async connect() {\n    if (!this.isBluetoothSupported()) {\n      throw new Error('Bluetooth não suportado neste dispositivo');\n    }\n    try {\n      console.log('Procurando impressoras Bluetooth...');\n\n      // Solicita dispositivo Bluetooth\n      this.device = await navigator.bluetooth.requestDevice({\n        filters: [{\n          services: this.serviceUUIDs\n        }, {\n          namePrefix: 'POS'\n        }, {\n          namePrefix: 'Printer'\n        }, {\n          namePrefix: 'Thermal'\n        }, {\n          namePrefix: 'ESC'\n        }],\n        optionalServices: this.serviceUUIDs\n      });\n      console.log('Dispositivo selecionado:', this.device.name);\n\n      // Conecta ao servidor GATT\n      this.server = await this.device.gatt.connect();\n      console.log('Conectado ao servidor GATT');\n\n      // Procura pelo serviço de impressão\n      await this.findPrintService();\n\n      // Configura eventos de desconexão\n      this.device.addEventListener('gattserverdisconnected', this.onDisconnected.bind(this));\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      this.emit('connected', {\n        name: this.device.name,\n        id: this.device.id,\n        language: this.printerConfig.language\n      });\n      console.log('Impressora conectada com sucesso!');\n      return true;\n    } catch (error) {\n      console.error('Erro ao conectar à impressora:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Procura pelo serviço de impressão na impressora\n   */\n  async findPrintService() {\n    for (const serviceUUID of this.serviceUUIDs) {\n      try {\n        this.service = await this.server.getPrimaryService(serviceUUID);\n        console.log('Serviço encontrado:', serviceUUID);\n\n        // Procura pela característica de escrita\n        for (const charUUID of this.characteristicUUIDs) {\n          try {\n            this.characteristic = await this.service.getCharacteristic(charUUID);\n            console.log('Característica encontrada:', charUUID);\n            return;\n          } catch (e) {\n            continue;\n          }\n        }\n      } catch (e) {\n        continue;\n      }\n    }\n    throw new Error('Serviço de impressão não encontrado na impressora');\n  }\n\n  /**\n   * Reconecta automaticamente à impressora\n   */\n  async reconnect() {\n    if (!this.device || this.reconnectAttempts >= this.maxReconnectAttempts) {\n      return false;\n    }\n    try {\n      this.reconnectAttempts++;\n      console.log(`Tentativa de reconexão ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);\n      this.server = await this.device.gatt.connect();\n      await this.findPrintService();\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      this.emit('connected', {\n        name: this.device.name,\n        id: this.device.id,\n        language: this.printerConfig.language\n      });\n      return true;\n    } catch (error) {\n      console.error('Erro na reconexão:', error);\n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\n        setTimeout(() => this.reconnect(), 2000);\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Desconecta da impressora\n   */\n  async disconnect() {\n    if (this.device && this.device.gatt.connected) {\n      this.device.gatt.disconnect();\n    }\n    this.isConnected = false;\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristic = null;\n  }\n\n  /**\n   * Evento de desconexão\n   */\n  onDisconnected() {\n    console.log('Impressora desconectada');\n    this.isConnected = false;\n    this.emit('disconnected');\n    if (this.autoReconnect) {\n      setTimeout(() => this.reconnect(), 1000);\n    }\n  }\n\n  /**\n   * Envia dados para a impressora\n   */\n  async sendData(data) {\n    if (!this.isConnected || !this.characteristic) {\n      throw new Error('Impressora não conectada');\n    }\n    try {\n      // Converte string para Uint8Array se necessário\n      let bytes;\n      if (typeof data === 'string') {\n        bytes = new TextEncoder().encode(data);\n      } else if (data instanceof Array) {\n        bytes = new Uint8Array(data);\n      } else {\n        bytes = data;\n      }\n\n      // Envia dados em chunks de 20 bytes (limitação BLE)\n      const chunkSize = 20;\n      for (let i = 0; i < bytes.length; i += chunkSize) {\n        const chunk = bytes.slice(i, i + chunkSize);\n        await this.characteristic.writeValue(chunk);\n\n        // Pequeno delay entre chunks\n        await new Promise(resolve => setTimeout(resolve, 10));\n      }\n      return true;\n    } catch (error) {\n      console.error('Erro ao enviar dados:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Comandos ESC/POS básicos\n   */\n  getESCPOSCommands() {\n    return {\n      // Comandos de inicialização\n      INIT: [0x1B, 0x40],\n      // ESC @\n\n      // Comandos de texto\n      BOLD_ON: [0x1B, 0x45, 0x01],\n      // ESC E 1\n      BOLD_OFF: [0x1B, 0x45, 0x00],\n      // ESC E 0\n      UNDERLINE_ON: [0x1B, 0x2D, 0x01],\n      // ESC - 1\n      UNDERLINE_OFF: [0x1B, 0x2D, 0x00],\n      // ESC - 0\n\n      // Comandos de alinhamento\n      ALIGN_LEFT: [0x1B, 0x61, 0x00],\n      // ESC a 0\n      ALIGN_CENTER: [0x1B, 0x61, 0x01],\n      // ESC a 1\n      ALIGN_RIGHT: [0x1B, 0x61, 0x02],\n      // ESC a 2\n\n      // Comandos de tamanho\n      SIZE_NORMAL: [0x1B, 0x21, 0x00],\n      // ESC ! 0\n      SIZE_DOUBLE_HEIGHT: [0x1B, 0x21, 0x10],\n      // ESC ! 16\n      SIZE_DOUBLE_WIDTH: [0x1B, 0x21, 0x20],\n      // ESC ! 32\n      SIZE_DOUBLE: [0x1B, 0x21, 0x30],\n      // ESC ! 48\n\n      // Comandos de linha\n      NEWLINE: [0x0A],\n      // LF\n      FEED_LINE: [0x1B, 0x64, 0x01],\n      // ESC d 1\n\n      // Comandos de corte\n      CUT_FULL: [0x1D, 0x56, 0x00],\n      // GS V 0\n      CUT_PARTIAL: [0x1D, 0x56, 0x01],\n      // GS V 1\n\n      // Comandos de gaveta\n      OPEN_DRAWER: [0x1B, 0x70, 0x00, 0x19, 0xFA] // ESC p 0 25 250\n    };\n  }\n\n  /**\n   * Formata comanda para impressão térmica\n   */\n  formatOrderReceipt(pedido) {\n    const commands = this.getESCPOSCommands();\n    let receipt = [];\n\n    // Inicializar impressora\n    receipt.push(...commands.INIT);\n\n    // Cabeçalho centralizado\n    receipt.push(...commands.ALIGN_CENTER);\n    receipt.push(...commands.SIZE_DOUBLE);\n    receipt.push(...commands.BOLD_ON);\n    receipt.push(...new TextEncoder().encode('ROTA EXPRESS'));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.BOLD_OFF);\n    receipt.push(...commands.SIZE_NORMAL);\n\n    // Linha separadora\n    receipt.push(...new TextEncoder().encode('================================'));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.NEWLINE);\n\n    // Informações do pedido\n    receipt.push(...commands.ALIGN_LEFT);\n    receipt.push(...commands.BOLD_ON);\n    receipt.push(...new TextEncoder().encode(`PEDIDO #${pedido.id}`));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.BOLD_OFF);\n\n    // Data e hora\n    const dataHora = new Date(pedido.data_pedido).toLocaleString('pt-BR');\n    receipt.push(...new TextEncoder().encode(`Data: ${dataHora}`));\n    receipt.push(...commands.NEWLINE);\n\n    // Cliente\n    if (pedido.cliente_nome) {\n      receipt.push(...new TextEncoder().encode(`Cliente: ${pedido.cliente_nome}`));\n      receipt.push(...commands.NEWLINE);\n    }\n\n    // Telefone\n    if (pedido.cliente_telefone) {\n      receipt.push(...new TextEncoder().encode(`Tel: ${pedido.cliente_telefone}`));\n      receipt.push(...commands.NEWLINE);\n    }\n\n    // Endereço\n    if (pedido.endereco_entrega) {\n      receipt.push(...new TextEncoder().encode(`Endereço: ${pedido.endereco_entrega}`));\n      receipt.push(...commands.NEWLINE);\n    }\n    receipt.push(...commands.NEWLINE);\n\n    // Linha separadora\n    receipt.push(...new TextEncoder().encode('--------------------------------'));\n    receipt.push(...commands.NEWLINE);\n\n    // Itens do pedido\n    receipt.push(...commands.BOLD_ON);\n    receipt.push(...new TextEncoder().encode('ITENS:'));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.BOLD_OFF);\n    if (pedido.itens && pedido.itens.length > 0) {\n      pedido.itens.forEach(item => {\n        // Nome do produto\n        receipt.push(...new TextEncoder().encode(`${item.quantidade}x ${item.produto_nome}`));\n        receipt.push(...commands.NEWLINE);\n\n        // Preço\n        const preco = parseFloat(item.preco_unitario || 0).toFixed(2);\n        receipt.push(...new TextEncoder().encode(`   R$ ${preco} cada`));\n        receipt.push(...commands.NEWLINE);\n\n        // Observações\n        if (item.observacoes) {\n          receipt.push(...new TextEncoder().encode(`   Obs: ${item.observacoes}`));\n          receipt.push(...commands.NEWLINE);\n        }\n        receipt.push(...commands.NEWLINE);\n      });\n    }\n\n    // Linha separadora\n    receipt.push(...new TextEncoder().encode('--------------------------------'));\n    receipt.push(...commands.NEWLINE);\n\n    // Total\n    receipt.push(...commands.ALIGN_RIGHT);\n    receipt.push(...commands.SIZE_DOUBLE_HEIGHT);\n    receipt.push(...commands.BOLD_ON);\n    const total = parseFloat(pedido.valor_total || 0).toFixed(2);\n    receipt.push(...new TextEncoder().encode(`TOTAL: R$ ${total}`));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.BOLD_OFF);\n    receipt.push(...commands.SIZE_NORMAL);\n\n    // Observações gerais\n    if (pedido.observacoes) {\n      receipt.push(...commands.ALIGN_LEFT);\n      receipt.push(...commands.NEWLINE);\n      receipt.push(...commands.BOLD_ON);\n      receipt.push(...new TextEncoder().encode('OBSERVAÇÕES:'));\n      receipt.push(...commands.NEWLINE);\n      receipt.push(...commands.BOLD_OFF);\n      receipt.push(...new TextEncoder().encode(pedido.observacoes));\n      receipt.push(...commands.NEWLINE);\n    }\n\n    // Rodapé\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.ALIGN_CENTER);\n    receipt.push(...new TextEncoder().encode('Obrigado pela preferência!'));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.NEWLINE);\n\n    // Cortar papel\n    receipt.push(...commands.CUT_PARTIAL);\n    return new Uint8Array(receipt);\n  }\n\n  /**\n   * Imprime comanda do pedido\n   */\n  async printOrder(pedido) {\n    try {\n      if (!this.isConnected) {\n        throw new Error('Impressora não conectada');\n      }\n      this.emit('printing', {\n        status: 'iniciando',\n        pedido: pedido.id\n      });\n      const receiptData = this.formatOrderReceipt(pedido);\n      await this.sendData(receiptData);\n      this.emit('printing', {\n        status: 'concluido',\n        pedido: pedido.id\n      });\n      console.log(`Comanda do pedido #${pedido.id} impressa com sucesso`);\n      return true;\n    } catch (error) {\n      console.error('Erro ao imprimir comanda:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Imprime teste de conexão\n   */\n  async printTest() {\n    try {\n      if (!this.isConnected) {\n        throw new Error('Impressora não conectada');\n      }\n      const commands = this.getESCPOSCommands();\n      let testData = [];\n      testData.push(...commands.INIT);\n      testData.push(...commands.ALIGN_CENTER);\n      testData.push(...commands.SIZE_DOUBLE);\n      testData.push(...commands.BOLD_ON);\n      testData.push(...new TextEncoder().encode('TESTE DE IMPRESSÃO'));\n      testData.push(...commands.NEWLINE);\n      testData.push(...commands.BOLD_OFF);\n      testData.push(...commands.SIZE_NORMAL);\n      testData.push(...commands.NEWLINE);\n      testData.push(...new TextEncoder().encode('Impressora conectada com sucesso!'));\n      testData.push(...commands.NEWLINE);\n      testData.push(...new TextEncoder().encode(new Date().toLocaleString('pt-BR')));\n      testData.push(...commands.NEWLINE);\n      testData.push(...commands.NEWLINE);\n      testData.push(...commands.CUT_PARTIAL);\n      await this.sendData(new Uint8Array(testData));\n      console.log('Teste de impressão realizado com sucesso');\n      return true;\n    } catch (error) {\n      console.error('Erro no teste de impressão:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Adiciona event listener\n   */\n  addEventListener(event, callback) {\n    if (this.eventListeners[event]) {\n      this.eventListeners[event].push(callback);\n    }\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(event, callback) {\n    if (this.eventListeners[event]) {\n      const index = this.eventListeners[event].indexOf(callback);\n      if (index > -1) {\n        this.eventListeners[event].splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Emite evento\n   */\n  emit(event, data) {\n    if (this.eventListeners[event]) {\n      this.eventListeners[event].forEach(callback => callback(data));\n    }\n  }\n\n  /**\n   * Verifica status da conexão\n   */\n  getConnectionStatus() {\n    var _this$device, _this$device2;\n    return {\n      isConnected: this.isConnected,\n      deviceName: ((_this$device = this.device) === null || _this$device === void 0 ? void 0 : _this$device.name) || null,\n      deviceId: ((_this$device2 = this.device) === null || _this$device2 === void 0 ? void 0 : _this$device2.id) || null,\n      autoReconnect: this.autoReconnect,\n      reconnectAttempts: this.reconnectAttempts\n    };\n  }\n}\n\n// Instância singleton\nconst bluetoothPrinter = new BluetoothPrinterService();\nexport default bluetoothPrinter;","map":{"version":3,"names":["BluetoothPrinterService","constructor","device","server","service","characteristic","isConnected","autoReconnect","reconnectAttempts","maxReconnectAttempts","serviceUUIDs","characteristicUUIDs","printerConfig","width","encoding","language","eventListeners","connected","disconnected","error","printing","isBluetoothSupported","navigator","bluetooth","console","isBluetoothAvailable","Error","availability","getAvailability","message","listPairedDevices","log","enableBluetooth","connect","requestDevice","filters","services","namePrefix","optionalServices","name","gatt","findPrintService","addEventListener","onDisconnected","bind","emit","id","serviceUUID","getPrimaryService","charUUID","getCharacteristic","e","reconnect","setTimeout","disconnect","sendData","data","bytes","TextEncoder","encode","Array","Uint8Array","chunkSize","i","length","chunk","slice","writeValue","Promise","resolve","getESCPOSCommands","INIT","BOLD_ON","BOLD_OFF","UNDERLINE_ON","UNDERLINE_OFF","ALIGN_LEFT","ALIGN_CENTER","ALIGN_RIGHT","SIZE_NORMAL","SIZE_DOUBLE_HEIGHT","SIZE_DOUBLE_WIDTH","SIZE_DOUBLE","NEWLINE","FEED_LINE","CUT_FULL","CUT_PARTIAL","OPEN_DRAWER","formatOrderReceipt","pedido","commands","receipt","push","dataHora","Date","data_pedido","toLocaleString","cliente_nome","cliente_telefone","endereco_entrega","itens","forEach","item","quantidade","produto_nome","preco","parseFloat","preco_unitario","toFixed","observacoes","total","valor_total","printOrder","status","receiptData","printTest","testData","event","callback","removeEventListener","index","indexOf","splice","getConnectionStatus","_this$device","_this$device2","deviceName","deviceId","bluetoothPrinter"],"sources":["E:/appatlas/react-app/src/services/bluetoothPrinter.js"],"sourcesContent":["/**\n * Serviço de Impressão Bluetooth para Impressoras Térmicas\n * Baseado na Web Bluetooth API para dispositivos Android\n */\n\nclass BluetoothPrinterService {\n  constructor() {\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristic = null;\n    this.isConnected = false;\n    this.autoReconnect = true;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    \n    // UUIDs comuns para impressoras térmicas ESC/POS\n    this.serviceUUIDs = [\n      '000018f0-0000-1000-8000-00805f9b34fb', // Nordic UART Service\n      '49535343-fe7d-4ae5-8fa9-9fafd205e455', // Microchip Data Service\n      '6e400001-b5a3-f393-e0a9-e50e24dcca9e', // Nordic UART Service Alternative\n      'serial_port' // Fallback para porta serial\n    ];\n    \n    this.characteristicUUIDs = [\n      '000018f1-0000-1000-8000-00805f9b34fb', // Nordic UART TX\n      '49535343-1e4d-4bd9-ba61-23c647249616', // Microchip Data TX\n      '6e400002-b5a3-f393-e0a9-e50e24dcca9e', // Nordic UART TX Alternative\n    ];\n\n    // Configurações da impressora\n    this.printerConfig = {\n      width: 48, // Largura em caracteres (58mm = 48 chars)\n      encoding: 'utf-8',\n      language: 'esc-pos'\n    };\n\n    // Event listeners\n    this.eventListeners = {\n      connected: [],\n      disconnected: [],\n      error: [],\n      printing: []\n    };\n  }\n\n  /**\n   * Verifica se o navegador suporta Web Bluetooth\n   */\n  isBluetoothSupported() {\n    if (!navigator.bluetooth) {\n      console.error('Web Bluetooth não é suportado neste navegador');\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Verifica se o Bluetooth está disponível\n   */\n  async isBluetoothAvailable() {\n    if (!this.isBluetoothSupported()) {\n      throw new Error('Web Bluetooth não é suportado neste navegador');\n    }\n    \n    try {\n      const availability = await navigator.bluetooth.getAvailability();\n      if (!availability) {\n        throw new Error('Bluetooth não está disponível neste dispositivo');\n      }\n      return true;\n    } catch (error) {\n      throw new Error('Erro ao verificar disponibilidade do Bluetooth: ' + error.message);\n    }\n  }\n\n  /**\n   * Lista dispositivos Bluetooth pareados (simulado para Web Bluetooth)\n   */\n  async listPairedDevices() {\n    if (!this.isBluetoothSupported()) {\n      throw new Error('Web Bluetooth não é suportado neste navegador');\n    }\n\n    try {\n      // Web Bluetooth API não permite listar dispositivos pareados\n      // Retorna uma lista vazia e instrui o usuário a conectar manualmente\n      console.log('Web Bluetooth API não permite listar dispositivos pareados automaticamente');\n      return [];\n    } catch (error) {\n      throw new Error('Erro ao listar dispositivos: ' + error.message);\n    }\n  }\n\n  /**\n   * Habilita o Bluetooth (não aplicável para Web Bluetooth)\n   */\n  async enableBluetooth() {\n    if (!this.isBluetoothSupported()) {\n      throw new Error('Web Bluetooth não é suportado neste navegador');\n    }\n\n    try {\n      // Web Bluetooth API não permite habilitar Bluetooth programaticamente\n      // O usuário deve habilitar manualmente nas configurações do dispositivo\n      const availability = await navigator.bluetooth.getAvailability();\n      if (!availability) {\n        throw new Error('Por favor, habilite o Bluetooth nas configurações do seu dispositivo');\n      }\n      return true;\n    } catch (error) {\n      throw new Error('Erro ao verificar Bluetooth: ' + error.message);\n    }\n  }\n\n  /**\n   * Conecta à impressora Bluetooth\n   */\n  async connect() {\n    if (!this.isBluetoothSupported()) {\n      throw new Error('Bluetooth não suportado neste dispositivo');\n    }\n\n    try {\n      console.log('Procurando impressoras Bluetooth...');\n      \n      // Solicita dispositivo Bluetooth\n      this.device = await navigator.bluetooth.requestDevice({\n        filters: [\n          { services: this.serviceUUIDs },\n          { namePrefix: 'POS' },\n          { namePrefix: 'Printer' },\n          { namePrefix: 'Thermal' },\n          { namePrefix: 'ESC' }\n        ],\n        optionalServices: this.serviceUUIDs\n      });\n\n      console.log('Dispositivo selecionado:', this.device.name);\n\n      // Conecta ao servidor GATT\n      this.server = await this.device.gatt.connect();\n      console.log('Conectado ao servidor GATT');\n\n      // Procura pelo serviço de impressão\n      await this.findPrintService();\n\n      // Configura eventos de desconexão\n      this.device.addEventListener('gattserverdisconnected', this.onDisconnected.bind(this));\n\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      \n      this.emit('connected', {\n        name: this.device.name,\n        id: this.device.id,\n        language: this.printerConfig.language\n      });\n\n      console.log('Impressora conectada com sucesso!');\n      return true;\n\n    } catch (error) {\n      console.error('Erro ao conectar à impressora:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Procura pelo serviço de impressão na impressora\n   */\n  async findPrintService() {\n    for (const serviceUUID of this.serviceUUIDs) {\n      try {\n        this.service = await this.server.getPrimaryService(serviceUUID);\n        console.log('Serviço encontrado:', serviceUUID);\n        \n        // Procura pela característica de escrita\n        for (const charUUID of this.characteristicUUIDs) {\n          try {\n            this.characteristic = await this.service.getCharacteristic(charUUID);\n            console.log('Característica encontrada:', charUUID);\n            return;\n          } catch (e) {\n            continue;\n          }\n        }\n      } catch (e) {\n        continue;\n      }\n    }\n    \n    throw new Error('Serviço de impressão não encontrado na impressora');\n  }\n\n  /**\n   * Reconecta automaticamente à impressora\n   */\n  async reconnect() {\n    if (!this.device || this.reconnectAttempts >= this.maxReconnectAttempts) {\n      return false;\n    }\n\n    try {\n      this.reconnectAttempts++;\n      console.log(`Tentativa de reconexão ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);\n      \n      this.server = await this.device.gatt.connect();\n      await this.findPrintService();\n      \n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      \n      this.emit('connected', {\n        name: this.device.name,\n        id: this.device.id,\n        language: this.printerConfig.language\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Erro na reconexão:', error);\n      \n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\n        setTimeout(() => this.reconnect(), 2000);\n      }\n      \n      return false;\n    }\n  }\n\n  /**\n   * Desconecta da impressora\n   */\n  async disconnect() {\n    if (this.device && this.device.gatt.connected) {\n      this.device.gatt.disconnect();\n    }\n    this.isConnected = false;\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristic = null;\n  }\n\n  /**\n   * Evento de desconexão\n   */\n  onDisconnected() {\n    console.log('Impressora desconectada');\n    this.isConnected = false;\n    this.emit('disconnected');\n    \n    if (this.autoReconnect) {\n      setTimeout(() => this.reconnect(), 1000);\n    }\n  }\n\n  /**\n   * Envia dados para a impressora\n   */\n  async sendData(data) {\n    if (!this.isConnected || !this.characteristic) {\n      throw new Error('Impressora não conectada');\n    }\n\n    try {\n      // Converte string para Uint8Array se necessário\n      let bytes;\n      if (typeof data === 'string') {\n        bytes = new TextEncoder().encode(data);\n      } else if (data instanceof Array) {\n        bytes = new Uint8Array(data);\n      } else {\n        bytes = data;\n      }\n\n      // Envia dados em chunks de 20 bytes (limitação BLE)\n      const chunkSize = 20;\n      for (let i = 0; i < bytes.length; i += chunkSize) {\n        const chunk = bytes.slice(i, i + chunkSize);\n        await this.characteristic.writeValue(chunk);\n        \n        // Pequeno delay entre chunks\n        await new Promise(resolve => setTimeout(resolve, 10));\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Erro ao enviar dados:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Comandos ESC/POS básicos\n   */\n  getESCPOSCommands() {\n    return {\n      // Comandos de inicialização\n      INIT: [0x1B, 0x40], // ESC @\n      \n      // Comandos de texto\n      BOLD_ON: [0x1B, 0x45, 0x01], // ESC E 1\n      BOLD_OFF: [0x1B, 0x45, 0x00], // ESC E 0\n      UNDERLINE_ON: [0x1B, 0x2D, 0x01], // ESC - 1\n      UNDERLINE_OFF: [0x1B, 0x2D, 0x00], // ESC - 0\n      \n      // Comandos de alinhamento\n      ALIGN_LEFT: [0x1B, 0x61, 0x00], // ESC a 0\n      ALIGN_CENTER: [0x1B, 0x61, 0x01], // ESC a 1\n      ALIGN_RIGHT: [0x1B, 0x61, 0x02], // ESC a 2\n      \n      // Comandos de tamanho\n      SIZE_NORMAL: [0x1B, 0x21, 0x00], // ESC ! 0\n      SIZE_DOUBLE_HEIGHT: [0x1B, 0x21, 0x10], // ESC ! 16\n      SIZE_DOUBLE_WIDTH: [0x1B, 0x21, 0x20], // ESC ! 32\n      SIZE_DOUBLE: [0x1B, 0x21, 0x30], // ESC ! 48\n      \n      // Comandos de linha\n      NEWLINE: [0x0A], // LF\n      FEED_LINE: [0x1B, 0x64, 0x01], // ESC d 1\n      \n      // Comandos de corte\n      CUT_FULL: [0x1D, 0x56, 0x00], // GS V 0\n      CUT_PARTIAL: [0x1D, 0x56, 0x01], // GS V 1\n      \n      // Comandos de gaveta\n      OPEN_DRAWER: [0x1B, 0x70, 0x00, 0x19, 0xFA] // ESC p 0 25 250\n    };\n  }\n\n  /**\n   * Formata comanda para impressão térmica\n   */\n  formatOrderReceipt(pedido) {\n    const commands = this.getESCPOSCommands();\n    let receipt = [];\n\n    // Inicializar impressora\n    receipt.push(...commands.INIT);\n    \n    // Cabeçalho centralizado\n    receipt.push(...commands.ALIGN_CENTER);\n    receipt.push(...commands.SIZE_DOUBLE);\n    receipt.push(...commands.BOLD_ON);\n    receipt.push(...new TextEncoder().encode('ROTA EXPRESS'));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.BOLD_OFF);\n    receipt.push(...commands.SIZE_NORMAL);\n    \n    // Linha separadora\n    receipt.push(...new TextEncoder().encode('================================'));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.NEWLINE);\n    \n    // Informações do pedido\n    receipt.push(...commands.ALIGN_LEFT);\n    receipt.push(...commands.BOLD_ON);\n    receipt.push(...new TextEncoder().encode(`PEDIDO #${pedido.id}`));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.BOLD_OFF);\n    \n    // Data e hora\n    const dataHora = new Date(pedido.data_pedido).toLocaleString('pt-BR');\n    receipt.push(...new TextEncoder().encode(`Data: ${dataHora}`));\n    receipt.push(...commands.NEWLINE);\n    \n    // Cliente\n    if (pedido.cliente_nome) {\n      receipt.push(...new TextEncoder().encode(`Cliente: ${pedido.cliente_nome}`));\n      receipt.push(...commands.NEWLINE);\n    }\n    \n    // Telefone\n    if (pedido.cliente_telefone) {\n      receipt.push(...new TextEncoder().encode(`Tel: ${pedido.cliente_telefone}`));\n      receipt.push(...commands.NEWLINE);\n    }\n    \n    // Endereço\n    if (pedido.endereco_entrega) {\n      receipt.push(...new TextEncoder().encode(`Endereço: ${pedido.endereco_entrega}`));\n      receipt.push(...commands.NEWLINE);\n    }\n    \n    receipt.push(...commands.NEWLINE);\n    \n    // Linha separadora\n    receipt.push(...new TextEncoder().encode('--------------------------------'));\n    receipt.push(...commands.NEWLINE);\n    \n    // Itens do pedido\n    receipt.push(...commands.BOLD_ON);\n    receipt.push(...new TextEncoder().encode('ITENS:'));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.BOLD_OFF);\n    \n    if (pedido.itens && pedido.itens.length > 0) {\n      pedido.itens.forEach(item => {\n        // Nome do produto\n        receipt.push(...new TextEncoder().encode(`${item.quantidade}x ${item.produto_nome}`));\n        receipt.push(...commands.NEWLINE);\n        \n        // Preço\n        const preco = parseFloat(item.preco_unitario || 0).toFixed(2);\n        receipt.push(...new TextEncoder().encode(`   R$ ${preco} cada`));\n        receipt.push(...commands.NEWLINE);\n        \n        // Observações\n        if (item.observacoes) {\n          receipt.push(...new TextEncoder().encode(`   Obs: ${item.observacoes}`));\n          receipt.push(...commands.NEWLINE);\n        }\n        \n        receipt.push(...commands.NEWLINE);\n      });\n    }\n    \n    // Linha separadora\n    receipt.push(...new TextEncoder().encode('--------------------------------'));\n    receipt.push(...commands.NEWLINE);\n    \n    // Total\n    receipt.push(...commands.ALIGN_RIGHT);\n    receipt.push(...commands.SIZE_DOUBLE_HEIGHT);\n    receipt.push(...commands.BOLD_ON);\n    const total = parseFloat(pedido.valor_total || 0).toFixed(2);\n    receipt.push(...new TextEncoder().encode(`TOTAL: R$ ${total}`));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.BOLD_OFF);\n    receipt.push(...commands.SIZE_NORMAL);\n    \n    // Observações gerais\n    if (pedido.observacoes) {\n      receipt.push(...commands.ALIGN_LEFT);\n      receipt.push(...commands.NEWLINE);\n      receipt.push(...commands.BOLD_ON);\n      receipt.push(...new TextEncoder().encode('OBSERVAÇÕES:'));\n      receipt.push(...commands.NEWLINE);\n      receipt.push(...commands.BOLD_OFF);\n      receipt.push(...new TextEncoder().encode(pedido.observacoes));\n      receipt.push(...commands.NEWLINE);\n    }\n    \n    // Rodapé\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.ALIGN_CENTER);\n    receipt.push(...new TextEncoder().encode('Obrigado pela preferência!'));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.NEWLINE);\n    \n    // Cortar papel\n    receipt.push(...commands.CUT_PARTIAL);\n    \n    return new Uint8Array(receipt);\n  }\n\n  /**\n   * Imprime comanda do pedido\n   */\n  async printOrder(pedido) {\n    try {\n      if (!this.isConnected) {\n        throw new Error('Impressora não conectada');\n      }\n\n      this.emit('printing', { status: 'iniciando', pedido: pedido.id });\n      \n      const receiptData = this.formatOrderReceipt(pedido);\n      await this.sendData(receiptData);\n      \n      this.emit('printing', { status: 'concluido', pedido: pedido.id });\n      \n      console.log(`Comanda do pedido #${pedido.id} impressa com sucesso`);\n      return true;\n      \n    } catch (error) {\n      console.error('Erro ao imprimir comanda:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Imprime teste de conexão\n   */\n  async printTest() {\n    try {\n      if (!this.isConnected) {\n        throw new Error('Impressora não conectada');\n      }\n\n      const commands = this.getESCPOSCommands();\n      let testData = [];\n      \n      testData.push(...commands.INIT);\n      testData.push(...commands.ALIGN_CENTER);\n      testData.push(...commands.SIZE_DOUBLE);\n      testData.push(...commands.BOLD_ON);\n      testData.push(...new TextEncoder().encode('TESTE DE IMPRESSÃO'));\n      testData.push(...commands.NEWLINE);\n      testData.push(...commands.BOLD_OFF);\n      testData.push(...commands.SIZE_NORMAL);\n      testData.push(...commands.NEWLINE);\n      testData.push(...new TextEncoder().encode('Impressora conectada com sucesso!'));\n      testData.push(...commands.NEWLINE);\n      testData.push(...new TextEncoder().encode(new Date().toLocaleString('pt-BR')));\n      testData.push(...commands.NEWLINE);\n      testData.push(...commands.NEWLINE);\n      testData.push(...commands.CUT_PARTIAL);\n      \n      await this.sendData(new Uint8Array(testData));\n      \n      console.log('Teste de impressão realizado com sucesso');\n      return true;\n      \n    } catch (error) {\n      console.error('Erro no teste de impressão:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Adiciona event listener\n   */\n  addEventListener(event, callback) {\n    if (this.eventListeners[event]) {\n      this.eventListeners[event].push(callback);\n    }\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(event, callback) {\n    if (this.eventListeners[event]) {\n      const index = this.eventListeners[event].indexOf(callback);\n      if (index > -1) {\n        this.eventListeners[event].splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Emite evento\n   */\n  emit(event, data) {\n    if (this.eventListeners[event]) {\n      this.eventListeners[event].forEach(callback => callback(data));\n    }\n  }\n\n  /**\n   * Verifica status da conexão\n   */\n  getConnectionStatus() {\n    return {\n      isConnected: this.isConnected,\n      deviceName: this.device?.name || null,\n      deviceId: this.device?.id || null,\n      autoReconnect: this.autoReconnect,\n      reconnectAttempts: this.reconnectAttempts\n    };\n  }\n}\n\n// Instância singleton\nconst bluetoothPrinter = new BluetoothPrinterService();\n\nexport default bluetoothPrinter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}