{"ast":null,"code":"/**\n * Serviço de Impressão Bluetooth para Impressoras Térmicas\n * Baseado na Web Bluetooth API para dispositivos Android\n */class BluetoothPrinterService{constructor(){this.device=null;this.server=null;this.service=null;this.characteristic=null;this.isConnected=false;this.autoReconnect=true;this.reconnectAttempts=0;this.maxReconnectAttempts=5;// UUIDs comuns para impressoras térmicas ESC/POS\nthis.serviceUUIDs=['000018f0-0000-1000-8000-00805f9b34fb',// Nordic UART Service\n'49535343-fe7d-4ae5-8fa9-9fafd205e455',// Microchip Data Service\n'6e400001-b5a3-f393-e0a9-e50e24dcca9e',// Nordic UART Service Alternative\n'serial_port'// Fallback para porta serial\n];this.characteristicUUIDs=['000018f1-0000-1000-8000-00805f9b34fb',// Nordic UART TX\n'49535343-1e4d-4bd9-ba61-23c647249616',// Microchip Data TX\n'6e400002-b5a3-f393-e0a9-e50e24dcca9e'// Nordic UART TX Alternative\n];// Configurações da impressora\nthis.printerConfig={width:48,// Largura em caracteres (58mm = 48 chars)\nencoding:'utf-8',language:'esc-pos'};// Event listeners\nthis.eventListeners={connected:[],disconnected:[],error:[],printing:[]};}/**\n   * Verifica se o navegador suporta Web Bluetooth\n   */isBluetoothSupported(){if(!navigator.bluetooth){console.error('Web Bluetooth não é suportado neste navegador');return false;}return true;}/**\n   * Verifica se o Bluetooth está disponível\n   */async isBluetoothAvailable(){if(!this.isBluetoothSupported()){throw new Error('Web Bluetooth não é suportado neste navegador');}try{const availability=await navigator.bluetooth.getAvailability();if(!availability){throw new Error('Bluetooth não está disponível neste dispositivo');}return true;}catch(error){throw new Error('Erro ao verificar disponibilidade do Bluetooth: '+error.message);}}/**\n   * Lista dispositivos Bluetooth pareados (simulado para Web Bluetooth)\n   */async listPairedDevices(){if(!this.isBluetoothSupported()){throw new Error('Web Bluetooth não é suportado neste navegador');}try{// Web Bluetooth API não permite listar dispositivos pareados\n// Retorna uma lista vazia e instrui o usuário a conectar manualmente\nconsole.log('Web Bluetooth API não permite listar dispositivos pareados automaticamente');return[];}catch(error){throw new Error('Erro ao listar dispositivos: '+error.message);}}/**\n   * Habilita o Bluetooth (não aplicável para Web Bluetooth)\n   */async enableBluetooth(){if(!this.isBluetoothSupported()){throw new Error('Web Bluetooth não é suportado neste navegador');}try{// Web Bluetooth API não permite habilitar Bluetooth programaticamente\n// O usuário deve habilitar manualmente nas configurações do dispositivo\nconst availability=await navigator.bluetooth.getAvailability();if(!availability){throw new Error('Por favor, habilite o Bluetooth nas configurações do seu dispositivo');}return true;}catch(error){throw new Error('Erro ao verificar Bluetooth: '+error.message);}}/**\n   * Conecta à impressora Bluetooth\n   */async connect(){if(!this.isBluetoothSupported()){throw new Error('Bluetooth não suportado neste dispositivo');}try{console.log('Procurando impressoras Bluetooth...');// Solicita dispositivo Bluetooth\nthis.device=await navigator.bluetooth.requestDevice({filters:[{services:this.serviceUUIDs},{namePrefix:'POS'},{namePrefix:'Printer'},{namePrefix:'Thermal'},{namePrefix:'ESC'}],optionalServices:this.serviceUUIDs});console.log('Dispositivo selecionado:',this.device.name);// Conecta ao servidor GATT\nthis.server=await this.device.gatt.connect();console.log('Conectado ao servidor GATT');// Procura pelo serviço de impressão\nawait this.findPrintService();// Configura eventos de desconexão\nthis.device.addEventListener('gattserverdisconnected',this.onDisconnected.bind(this));this.isConnected=true;this.reconnectAttempts=0;this.emit('connected',{name:this.device.name,id:this.device.id,language:this.printerConfig.language});console.log('Impressora conectada com sucesso!');return true;}catch(error){console.error('Erro ao conectar à impressora:',error);this.emit('error',error);throw error;}}/**\n   * Procura pelo serviço de impressão na impressora\n   */async findPrintService(){for(const serviceUUID of this.serviceUUIDs){try{this.service=await this.server.getPrimaryService(serviceUUID);console.log('Serviço encontrado:',serviceUUID);// Procura pela característica de escrita\nfor(const charUUID of this.characteristicUUIDs){try{this.characteristic=await this.service.getCharacteristic(charUUID);console.log('Característica encontrada:',charUUID);return;}catch(e){continue;}}}catch(e){continue;}}throw new Error('Serviço de impressão não encontrado na impressora');}/**\n   * Reconecta automaticamente à impressora\n   */async reconnect(){if(!this.device||this.reconnectAttempts>=this.maxReconnectAttempts){return false;}try{this.reconnectAttempts++;console.log(\"Tentativa de reconex\\xE3o \".concat(this.reconnectAttempts,\"/\").concat(this.maxReconnectAttempts));this.server=await this.device.gatt.connect();await this.findPrintService();this.isConnected=true;this.reconnectAttempts=0;this.emit('connected',{name:this.device.name,id:this.device.id,language:this.printerConfig.language});return true;}catch(error){console.error('Erro na reconexão:',error);if(this.reconnectAttempts<this.maxReconnectAttempts){setTimeout(()=>this.reconnect(),2000);}return false;}}/**\n   * Desconecta da impressora\n   */async disconnect(){if(this.device&&this.device.gatt.connected){this.device.gatt.disconnect();}this.isConnected=false;this.device=null;this.server=null;this.service=null;this.characteristic=null;}/**\n   * Evento de desconexão\n   */onDisconnected(){console.log('Impressora desconectada');this.isConnected=false;this.emit('disconnected');if(this.autoReconnect){setTimeout(()=>this.reconnect(),1000);}}/**\n   * Envia dados para a impressora\n   */async sendData(data){if(!this.isConnected||!this.characteristic){throw new Error('Impressora não conectada');}try{// Converte string para Uint8Array se necessário\nlet bytes;if(typeof data==='string'){bytes=new TextEncoder().encode(data);}else if(data instanceof Array){bytes=new Uint8Array(data);}else{bytes=data;}// Envia dados em chunks de 20 bytes (limitação BLE)\nconst chunkSize=20;for(let i=0;i<bytes.length;i+=chunkSize){const chunk=bytes.slice(i,i+chunkSize);await this.characteristic.writeValue(chunk);// Pequeno delay entre chunks\nawait new Promise(resolve=>setTimeout(resolve,10));}return true;}catch(error){console.error('Erro ao enviar dados:',error);this.emit('error',error);throw error;}}/**\n   * Comandos ESC/POS básicos\n   */getESCPOSCommands(){return{// Comandos de inicialização\nINIT:[0x1B,0x40],// ESC @\n// Comandos de texto\nBOLD_ON:[0x1B,0x45,0x01],// ESC E 1\nBOLD_OFF:[0x1B,0x45,0x00],// ESC E 0\nUNDERLINE_ON:[0x1B,0x2D,0x01],// ESC - 1\nUNDERLINE_OFF:[0x1B,0x2D,0x00],// ESC - 0\n// Comandos de alinhamento\nALIGN_LEFT:[0x1B,0x61,0x00],// ESC a 0\nALIGN_CENTER:[0x1B,0x61,0x01],// ESC a 1\nALIGN_RIGHT:[0x1B,0x61,0x02],// ESC a 2\n// Comandos de tamanho\nSIZE_NORMAL:[0x1B,0x21,0x00],// ESC ! 0\nSIZE_DOUBLE_HEIGHT:[0x1B,0x21,0x10],// ESC ! 16\nSIZE_DOUBLE_WIDTH:[0x1B,0x21,0x20],// ESC ! 32\nSIZE_DOUBLE:[0x1B,0x21,0x30],// ESC ! 48\n// Comandos de linha\nNEWLINE:[0x0A],// LF\nFEED_LINE:[0x1B,0x64,0x01],// ESC d 1\n// Comandos de corte\nCUT_FULL:[0x1D,0x56,0x00],// GS V 0\nCUT_PARTIAL:[0x1D,0x56,0x01],// GS V 1\n// Comandos de gaveta\nOPEN_DRAWER:[0x1B,0x70,0x00,0x19,0xFA]// ESC p 0 25 250\n};}/**\n   * Formata comanda para impressão térmica\n   */formatOrderReceipt(pedido){const commands=this.getESCPOSCommands();let receipt=[];// Inicializar impressora\nreceipt.push(...commands.INIT);// Cabeçalho centralizado\nreceipt.push(...commands.ALIGN_CENTER);receipt.push(...commands.SIZE_DOUBLE);receipt.push(...commands.BOLD_ON);receipt.push(...new TextEncoder().encode('ROTA EXPRESS'));receipt.push(...commands.NEWLINE);receipt.push(...commands.BOLD_OFF);receipt.push(...commands.SIZE_NORMAL);// Linha separadora\nreceipt.push(...new TextEncoder().encode('================================'));receipt.push(...commands.NEWLINE);receipt.push(...commands.NEWLINE);// Informações do pedido\nreceipt.push(...commands.ALIGN_LEFT);receipt.push(...commands.BOLD_ON);receipt.push(...new TextEncoder().encode(\"PEDIDO #\".concat(pedido.id)));receipt.push(...commands.NEWLINE);receipt.push(...commands.BOLD_OFF);// Data e hora\nconst dataHora=new Date(pedido.data_pedido).toLocaleString('pt-BR');receipt.push(...new TextEncoder().encode(\"Data: \".concat(dataHora)));receipt.push(...commands.NEWLINE);// Cliente\nif(pedido.cliente_nome){receipt.push(...new TextEncoder().encode(\"Cliente: \".concat(pedido.cliente_nome)));receipt.push(...commands.NEWLINE);}// Telefone\nif(pedido.cliente_telefone){receipt.push(...new TextEncoder().encode(\"Tel: \".concat(pedido.cliente_telefone)));receipt.push(...commands.NEWLINE);}// Endereço\nif(pedido.endereco_entrega){receipt.push(...new TextEncoder().encode(\"Endere\\xE7o: \".concat(pedido.endereco_entrega)));receipt.push(...commands.NEWLINE);}receipt.push(...commands.NEWLINE);// Linha separadora\nreceipt.push(...new TextEncoder().encode('--------------------------------'));receipt.push(...commands.NEWLINE);// Itens do pedido\nreceipt.push(...commands.BOLD_ON);receipt.push(...new TextEncoder().encode('ITENS:'));receipt.push(...commands.NEWLINE);receipt.push(...commands.BOLD_OFF);if(pedido.itens&&pedido.itens.length>0){pedido.itens.forEach(item=>{// Nome do produto\nreceipt.push(...new TextEncoder().encode(\"\".concat(item.quantidade,\"x \").concat(item.produto_nome)));receipt.push(...commands.NEWLINE);// Preço\nconst preco=parseFloat(item.preco_unitario||0).toFixed(2);receipt.push(...new TextEncoder().encode(\"   R$ \".concat(preco,\" cada\")));receipt.push(...commands.NEWLINE);// Observações\nif(item.observacoes){receipt.push(...new TextEncoder().encode(\"   Obs: \".concat(item.observacoes)));receipt.push(...commands.NEWLINE);}receipt.push(...commands.NEWLINE);});}// Linha separadora\nreceipt.push(...new TextEncoder().encode('--------------------------------'));receipt.push(...commands.NEWLINE);// Total\nreceipt.push(...commands.ALIGN_RIGHT);receipt.push(...commands.SIZE_DOUBLE_HEIGHT);receipt.push(...commands.BOLD_ON);const total=parseFloat(pedido.valor_total||0).toFixed(2);receipt.push(...new TextEncoder().encode(\"TOTAL: R$ \".concat(total)));receipt.push(...commands.NEWLINE);receipt.push(...commands.BOLD_OFF);receipt.push(...commands.SIZE_NORMAL);// Observações gerais\nif(pedido.observacoes){receipt.push(...commands.ALIGN_LEFT);receipt.push(...commands.NEWLINE);receipt.push(...commands.BOLD_ON);receipt.push(...new TextEncoder().encode('OBSERVAÇÕES:'));receipt.push(...commands.NEWLINE);receipt.push(...commands.BOLD_OFF);receipt.push(...new TextEncoder().encode(pedido.observacoes));receipt.push(...commands.NEWLINE);}// Rodapé\nreceipt.push(...commands.NEWLINE);receipt.push(...commands.ALIGN_CENTER);receipt.push(...new TextEncoder().encode('Obrigado pela preferência!'));receipt.push(...commands.NEWLINE);receipt.push(...commands.NEWLINE);receipt.push(...commands.NEWLINE);// Cortar papel\nreceipt.push(...commands.CUT_PARTIAL);return new Uint8Array(receipt);}/**\n   * Imprime comanda do pedido\n   */async printOrder(pedido){try{if(!this.isConnected){throw new Error('Impressora não conectada');}this.emit('printing',{status:'iniciando',pedido:pedido.id});const receiptData=this.formatOrderReceipt(pedido);await this.sendData(receiptData);this.emit('printing',{status:'concluido',pedido:pedido.id});console.log(\"Comanda do pedido #\".concat(pedido.id,\" impressa com sucesso\"));return true;}catch(error){console.error('Erro ao imprimir comanda:',error);this.emit('error',error);throw error;}}/**\n   * Imprime teste de conexão\n   */async printTest(){try{if(!this.isConnected){throw new Error('Impressora não conectada');}const commands=this.getESCPOSCommands();let testData=[];testData.push(...commands.INIT);testData.push(...commands.ALIGN_CENTER);testData.push(...commands.SIZE_DOUBLE);testData.push(...commands.BOLD_ON);testData.push(...new TextEncoder().encode('TESTE DE IMPRESSÃO'));testData.push(...commands.NEWLINE);testData.push(...commands.BOLD_OFF);testData.push(...commands.SIZE_NORMAL);testData.push(...commands.NEWLINE);testData.push(...new TextEncoder().encode('Impressora conectada com sucesso!'));testData.push(...commands.NEWLINE);testData.push(...new TextEncoder().encode(new Date().toLocaleString('pt-BR')));testData.push(...commands.NEWLINE);testData.push(...commands.NEWLINE);testData.push(...commands.CUT_PARTIAL);await this.sendData(new Uint8Array(testData));console.log('Teste de impressão realizado com sucesso');return true;}catch(error){console.error('Erro no teste de impressão:',error);this.emit('error',error);throw error;}}/**\n   * Adiciona event listener\n   */addEventListener(event,callback){if(this.eventListeners[event]){this.eventListeners[event].push(callback);}}/**\n   * Remove event listener\n   */removeEventListener(event,callback){if(this.eventListeners[event]){const index=this.eventListeners[event].indexOf(callback);if(index>-1){this.eventListeners[event].splice(index,1);}}}/**\n   * Emite evento\n   */emit(event,data){if(this.eventListeners[event]){this.eventListeners[event].forEach(callback=>callback(data));}}/**\n   * Verifica status da conexão\n   */getConnectionStatus(){var _this$device,_this$device2;return{isConnected:this.isConnected,deviceName:((_this$device=this.device)===null||_this$device===void 0?void 0:_this$device.name)||null,deviceId:((_this$device2=this.device)===null||_this$device2===void 0?void 0:_this$device2.id)||null,autoReconnect:this.autoReconnect,reconnectAttempts:this.reconnectAttempts};}}// Instância singleton\nconst bluetoothPrinter=new BluetoothPrinterService();export default bluetoothPrinter;","map":{"version":3,"names":["BluetoothPrinterService","constructor","device","server","service","characteristic","isConnected","autoReconnect","reconnectAttempts","maxReconnectAttempts","serviceUUIDs","characteristicUUIDs","printerConfig","width","encoding","language","eventListeners","connected","disconnected","error","printing","isBluetoothSupported","navigator","bluetooth","console","isBluetoothAvailable","Error","availability","getAvailability","message","listPairedDevices","log","enableBluetooth","connect","requestDevice","filters","services","namePrefix","optionalServices","name","gatt","findPrintService","addEventListener","onDisconnected","bind","emit","id","serviceUUID","getPrimaryService","charUUID","getCharacteristic","e","reconnect","concat","setTimeout","disconnect","sendData","data","bytes","TextEncoder","encode","Array","Uint8Array","chunkSize","i","length","chunk","slice","writeValue","Promise","resolve","getESCPOSCommands","INIT","BOLD_ON","BOLD_OFF","UNDERLINE_ON","UNDERLINE_OFF","ALIGN_LEFT","ALIGN_CENTER","ALIGN_RIGHT","SIZE_NORMAL","SIZE_DOUBLE_HEIGHT","SIZE_DOUBLE_WIDTH","SIZE_DOUBLE","NEWLINE","FEED_LINE","CUT_FULL","CUT_PARTIAL","OPEN_DRAWER","formatOrderReceipt","pedido","commands","receipt","push","dataHora","Date","data_pedido","toLocaleString","cliente_nome","cliente_telefone","endereco_entrega","itens","forEach","item","quantidade","produto_nome","preco","parseFloat","preco_unitario","toFixed","observacoes","total","valor_total","printOrder","status","receiptData","printTest","testData","event","callback","removeEventListener","index","indexOf","splice","getConnectionStatus","_this$device","_this$device2","deviceName","deviceId","bluetoothPrinter"],"sources":["E:/appatlas/react-app/src/services/bluetoothPrinter.js"],"sourcesContent":["/**\n * Serviço de Impressão Bluetooth para Impressoras Térmicas\n * Baseado na Web Bluetooth API para dispositivos Android\n */\n\nclass BluetoothPrinterService {\n  constructor() {\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristic = null;\n    this.isConnected = false;\n    this.autoReconnect = true;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    \n    // UUIDs comuns para impressoras térmicas ESC/POS\n    this.serviceUUIDs = [\n      '000018f0-0000-1000-8000-00805f9b34fb', // Nordic UART Service\n      '49535343-fe7d-4ae5-8fa9-9fafd205e455', // Microchip Data Service\n      '6e400001-b5a3-f393-e0a9-e50e24dcca9e', // Nordic UART Service Alternative\n      'serial_port' // Fallback para porta serial\n    ];\n    \n    this.characteristicUUIDs = [\n      '000018f1-0000-1000-8000-00805f9b34fb', // Nordic UART TX\n      '49535343-1e4d-4bd9-ba61-23c647249616', // Microchip Data TX\n      '6e400002-b5a3-f393-e0a9-e50e24dcca9e', // Nordic UART TX Alternative\n    ];\n\n    // Configurações da impressora\n    this.printerConfig = {\n      width: 48, // Largura em caracteres (58mm = 48 chars)\n      encoding: 'utf-8',\n      language: 'esc-pos'\n    };\n\n    // Event listeners\n    this.eventListeners = {\n      connected: [],\n      disconnected: [],\n      error: [],\n      printing: []\n    };\n  }\n\n  /**\n   * Verifica se o navegador suporta Web Bluetooth\n   */\n  isBluetoothSupported() {\n    if (!navigator.bluetooth) {\n      console.error('Web Bluetooth não é suportado neste navegador');\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Verifica se o Bluetooth está disponível\n   */\n  async isBluetoothAvailable() {\n    if (!this.isBluetoothSupported()) {\n      throw new Error('Web Bluetooth não é suportado neste navegador');\n    }\n    \n    try {\n      const availability = await navigator.bluetooth.getAvailability();\n      if (!availability) {\n        throw new Error('Bluetooth não está disponível neste dispositivo');\n      }\n      return true;\n    } catch (error) {\n      throw new Error('Erro ao verificar disponibilidade do Bluetooth: ' + error.message);\n    }\n  }\n\n  /**\n   * Lista dispositivos Bluetooth pareados (simulado para Web Bluetooth)\n   */\n  async listPairedDevices() {\n    if (!this.isBluetoothSupported()) {\n      throw new Error('Web Bluetooth não é suportado neste navegador');\n    }\n\n    try {\n      // Web Bluetooth API não permite listar dispositivos pareados\n      // Retorna uma lista vazia e instrui o usuário a conectar manualmente\n      console.log('Web Bluetooth API não permite listar dispositivos pareados automaticamente');\n      return [];\n    } catch (error) {\n      throw new Error('Erro ao listar dispositivos: ' + error.message);\n    }\n  }\n\n  /**\n   * Habilita o Bluetooth (não aplicável para Web Bluetooth)\n   */\n  async enableBluetooth() {\n    if (!this.isBluetoothSupported()) {\n      throw new Error('Web Bluetooth não é suportado neste navegador');\n    }\n\n    try {\n      // Web Bluetooth API não permite habilitar Bluetooth programaticamente\n      // O usuário deve habilitar manualmente nas configurações do dispositivo\n      const availability = await navigator.bluetooth.getAvailability();\n      if (!availability) {\n        throw new Error('Por favor, habilite o Bluetooth nas configurações do seu dispositivo');\n      }\n      return true;\n    } catch (error) {\n      throw new Error('Erro ao verificar Bluetooth: ' + error.message);\n    }\n  }\n\n  /**\n   * Conecta à impressora Bluetooth\n   */\n  async connect() {\n    if (!this.isBluetoothSupported()) {\n      throw new Error('Bluetooth não suportado neste dispositivo');\n    }\n\n    try {\n      console.log('Procurando impressoras Bluetooth...');\n      \n      // Solicita dispositivo Bluetooth\n      this.device = await navigator.bluetooth.requestDevice({\n        filters: [\n          { services: this.serviceUUIDs },\n          { namePrefix: 'POS' },\n          { namePrefix: 'Printer' },\n          { namePrefix: 'Thermal' },\n          { namePrefix: 'ESC' }\n        ],\n        optionalServices: this.serviceUUIDs\n      });\n\n      console.log('Dispositivo selecionado:', this.device.name);\n\n      // Conecta ao servidor GATT\n      this.server = await this.device.gatt.connect();\n      console.log('Conectado ao servidor GATT');\n\n      // Procura pelo serviço de impressão\n      await this.findPrintService();\n\n      // Configura eventos de desconexão\n      this.device.addEventListener('gattserverdisconnected', this.onDisconnected.bind(this));\n\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      \n      this.emit('connected', {\n        name: this.device.name,\n        id: this.device.id,\n        language: this.printerConfig.language\n      });\n\n      console.log('Impressora conectada com sucesso!');\n      return true;\n\n    } catch (error) {\n      console.error('Erro ao conectar à impressora:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Procura pelo serviço de impressão na impressora\n   */\n  async findPrintService() {\n    for (const serviceUUID of this.serviceUUIDs) {\n      try {\n        this.service = await this.server.getPrimaryService(serviceUUID);\n        console.log('Serviço encontrado:', serviceUUID);\n        \n        // Procura pela característica de escrita\n        for (const charUUID of this.characteristicUUIDs) {\n          try {\n            this.characteristic = await this.service.getCharacteristic(charUUID);\n            console.log('Característica encontrada:', charUUID);\n            return;\n          } catch (e) {\n            continue;\n          }\n        }\n      } catch (e) {\n        continue;\n      }\n    }\n    \n    throw new Error('Serviço de impressão não encontrado na impressora');\n  }\n\n  /**\n   * Reconecta automaticamente à impressora\n   */\n  async reconnect() {\n    if (!this.device || this.reconnectAttempts >= this.maxReconnectAttempts) {\n      return false;\n    }\n\n    try {\n      this.reconnectAttempts++;\n      console.log(`Tentativa de reconexão ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);\n      \n      this.server = await this.device.gatt.connect();\n      await this.findPrintService();\n      \n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      \n      this.emit('connected', {\n        name: this.device.name,\n        id: this.device.id,\n        language: this.printerConfig.language\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Erro na reconexão:', error);\n      \n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\n        setTimeout(() => this.reconnect(), 2000);\n      }\n      \n      return false;\n    }\n  }\n\n  /**\n   * Desconecta da impressora\n   */\n  async disconnect() {\n    if (this.device && this.device.gatt.connected) {\n      this.device.gatt.disconnect();\n    }\n    this.isConnected = false;\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristic = null;\n  }\n\n  /**\n   * Evento de desconexão\n   */\n  onDisconnected() {\n    console.log('Impressora desconectada');\n    this.isConnected = false;\n    this.emit('disconnected');\n    \n    if (this.autoReconnect) {\n      setTimeout(() => this.reconnect(), 1000);\n    }\n  }\n\n  /**\n   * Envia dados para a impressora\n   */\n  async sendData(data) {\n    if (!this.isConnected || !this.characteristic) {\n      throw new Error('Impressora não conectada');\n    }\n\n    try {\n      // Converte string para Uint8Array se necessário\n      let bytes;\n      if (typeof data === 'string') {\n        bytes = new TextEncoder().encode(data);\n      } else if (data instanceof Array) {\n        bytes = new Uint8Array(data);\n      } else {\n        bytes = data;\n      }\n\n      // Envia dados em chunks de 20 bytes (limitação BLE)\n      const chunkSize = 20;\n      for (let i = 0; i < bytes.length; i += chunkSize) {\n        const chunk = bytes.slice(i, i + chunkSize);\n        await this.characteristic.writeValue(chunk);\n        \n        // Pequeno delay entre chunks\n        await new Promise(resolve => setTimeout(resolve, 10));\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Erro ao enviar dados:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Comandos ESC/POS básicos\n   */\n  getESCPOSCommands() {\n    return {\n      // Comandos de inicialização\n      INIT: [0x1B, 0x40], // ESC @\n      \n      // Comandos de texto\n      BOLD_ON: [0x1B, 0x45, 0x01], // ESC E 1\n      BOLD_OFF: [0x1B, 0x45, 0x00], // ESC E 0\n      UNDERLINE_ON: [0x1B, 0x2D, 0x01], // ESC - 1\n      UNDERLINE_OFF: [0x1B, 0x2D, 0x00], // ESC - 0\n      \n      // Comandos de alinhamento\n      ALIGN_LEFT: [0x1B, 0x61, 0x00], // ESC a 0\n      ALIGN_CENTER: [0x1B, 0x61, 0x01], // ESC a 1\n      ALIGN_RIGHT: [0x1B, 0x61, 0x02], // ESC a 2\n      \n      // Comandos de tamanho\n      SIZE_NORMAL: [0x1B, 0x21, 0x00], // ESC ! 0\n      SIZE_DOUBLE_HEIGHT: [0x1B, 0x21, 0x10], // ESC ! 16\n      SIZE_DOUBLE_WIDTH: [0x1B, 0x21, 0x20], // ESC ! 32\n      SIZE_DOUBLE: [0x1B, 0x21, 0x30], // ESC ! 48\n      \n      // Comandos de linha\n      NEWLINE: [0x0A], // LF\n      FEED_LINE: [0x1B, 0x64, 0x01], // ESC d 1\n      \n      // Comandos de corte\n      CUT_FULL: [0x1D, 0x56, 0x00], // GS V 0\n      CUT_PARTIAL: [0x1D, 0x56, 0x01], // GS V 1\n      \n      // Comandos de gaveta\n      OPEN_DRAWER: [0x1B, 0x70, 0x00, 0x19, 0xFA] // ESC p 0 25 250\n    };\n  }\n\n  /**\n   * Formata comanda para impressão térmica\n   */\n  formatOrderReceipt(pedido) {\n    const commands = this.getESCPOSCommands();\n    let receipt = [];\n\n    // Inicializar impressora\n    receipt.push(...commands.INIT);\n    \n    // Cabeçalho centralizado\n    receipt.push(...commands.ALIGN_CENTER);\n    receipt.push(...commands.SIZE_DOUBLE);\n    receipt.push(...commands.BOLD_ON);\n    receipt.push(...new TextEncoder().encode('ROTA EXPRESS'));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.BOLD_OFF);\n    receipt.push(...commands.SIZE_NORMAL);\n    \n    // Linha separadora\n    receipt.push(...new TextEncoder().encode('================================'));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.NEWLINE);\n    \n    // Informações do pedido\n    receipt.push(...commands.ALIGN_LEFT);\n    receipt.push(...commands.BOLD_ON);\n    receipt.push(...new TextEncoder().encode(`PEDIDO #${pedido.id}`));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.BOLD_OFF);\n    \n    // Data e hora\n    const dataHora = new Date(pedido.data_pedido).toLocaleString('pt-BR');\n    receipt.push(...new TextEncoder().encode(`Data: ${dataHora}`));\n    receipt.push(...commands.NEWLINE);\n    \n    // Cliente\n    if (pedido.cliente_nome) {\n      receipt.push(...new TextEncoder().encode(`Cliente: ${pedido.cliente_nome}`));\n      receipt.push(...commands.NEWLINE);\n    }\n    \n    // Telefone\n    if (pedido.cliente_telefone) {\n      receipt.push(...new TextEncoder().encode(`Tel: ${pedido.cliente_telefone}`));\n      receipt.push(...commands.NEWLINE);\n    }\n    \n    // Endereço\n    if (pedido.endereco_entrega) {\n      receipt.push(...new TextEncoder().encode(`Endereço: ${pedido.endereco_entrega}`));\n      receipt.push(...commands.NEWLINE);\n    }\n    \n    receipt.push(...commands.NEWLINE);\n    \n    // Linha separadora\n    receipt.push(...new TextEncoder().encode('--------------------------------'));\n    receipt.push(...commands.NEWLINE);\n    \n    // Itens do pedido\n    receipt.push(...commands.BOLD_ON);\n    receipt.push(...new TextEncoder().encode('ITENS:'));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.BOLD_OFF);\n    \n    if (pedido.itens && pedido.itens.length > 0) {\n      pedido.itens.forEach(item => {\n        // Nome do produto\n        receipt.push(...new TextEncoder().encode(`${item.quantidade}x ${item.produto_nome}`));\n        receipt.push(...commands.NEWLINE);\n        \n        // Preço\n        const preco = parseFloat(item.preco_unitario || 0).toFixed(2);\n        receipt.push(...new TextEncoder().encode(`   R$ ${preco} cada`));\n        receipt.push(...commands.NEWLINE);\n        \n        // Observações\n        if (item.observacoes) {\n          receipt.push(...new TextEncoder().encode(`   Obs: ${item.observacoes}`));\n          receipt.push(...commands.NEWLINE);\n        }\n        \n        receipt.push(...commands.NEWLINE);\n      });\n    }\n    \n    // Linha separadora\n    receipt.push(...new TextEncoder().encode('--------------------------------'));\n    receipt.push(...commands.NEWLINE);\n    \n    // Total\n    receipt.push(...commands.ALIGN_RIGHT);\n    receipt.push(...commands.SIZE_DOUBLE_HEIGHT);\n    receipt.push(...commands.BOLD_ON);\n    const total = parseFloat(pedido.valor_total || 0).toFixed(2);\n    receipt.push(...new TextEncoder().encode(`TOTAL: R$ ${total}`));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.BOLD_OFF);\n    receipt.push(...commands.SIZE_NORMAL);\n    \n    // Observações gerais\n    if (pedido.observacoes) {\n      receipt.push(...commands.ALIGN_LEFT);\n      receipt.push(...commands.NEWLINE);\n      receipt.push(...commands.BOLD_ON);\n      receipt.push(...new TextEncoder().encode('OBSERVAÇÕES:'));\n      receipt.push(...commands.NEWLINE);\n      receipt.push(...commands.BOLD_OFF);\n      receipt.push(...new TextEncoder().encode(pedido.observacoes));\n      receipt.push(...commands.NEWLINE);\n    }\n    \n    // Rodapé\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.ALIGN_CENTER);\n    receipt.push(...new TextEncoder().encode('Obrigado pela preferência!'));\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.NEWLINE);\n    receipt.push(...commands.NEWLINE);\n    \n    // Cortar papel\n    receipt.push(...commands.CUT_PARTIAL);\n    \n    return new Uint8Array(receipt);\n  }\n\n  /**\n   * Imprime comanda do pedido\n   */\n  async printOrder(pedido) {\n    try {\n      if (!this.isConnected) {\n        throw new Error('Impressora não conectada');\n      }\n\n      this.emit('printing', { status: 'iniciando', pedido: pedido.id });\n      \n      const receiptData = this.formatOrderReceipt(pedido);\n      await this.sendData(receiptData);\n      \n      this.emit('printing', { status: 'concluido', pedido: pedido.id });\n      \n      console.log(`Comanda do pedido #${pedido.id} impressa com sucesso`);\n      return true;\n      \n    } catch (error) {\n      console.error('Erro ao imprimir comanda:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Imprime teste de conexão\n   */\n  async printTest() {\n    try {\n      if (!this.isConnected) {\n        throw new Error('Impressora não conectada');\n      }\n\n      const commands = this.getESCPOSCommands();\n      let testData = [];\n      \n      testData.push(...commands.INIT);\n      testData.push(...commands.ALIGN_CENTER);\n      testData.push(...commands.SIZE_DOUBLE);\n      testData.push(...commands.BOLD_ON);\n      testData.push(...new TextEncoder().encode('TESTE DE IMPRESSÃO'));\n      testData.push(...commands.NEWLINE);\n      testData.push(...commands.BOLD_OFF);\n      testData.push(...commands.SIZE_NORMAL);\n      testData.push(...commands.NEWLINE);\n      testData.push(...new TextEncoder().encode('Impressora conectada com sucesso!'));\n      testData.push(...commands.NEWLINE);\n      testData.push(...new TextEncoder().encode(new Date().toLocaleString('pt-BR')));\n      testData.push(...commands.NEWLINE);\n      testData.push(...commands.NEWLINE);\n      testData.push(...commands.CUT_PARTIAL);\n      \n      await this.sendData(new Uint8Array(testData));\n      \n      console.log('Teste de impressão realizado com sucesso');\n      return true;\n      \n    } catch (error) {\n      console.error('Erro no teste de impressão:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Adiciona event listener\n   */\n  addEventListener(event, callback) {\n    if (this.eventListeners[event]) {\n      this.eventListeners[event].push(callback);\n    }\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(event, callback) {\n    if (this.eventListeners[event]) {\n      const index = this.eventListeners[event].indexOf(callback);\n      if (index > -1) {\n        this.eventListeners[event].splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Emite evento\n   */\n  emit(event, data) {\n    if (this.eventListeners[event]) {\n      this.eventListeners[event].forEach(callback => callback(data));\n    }\n  }\n\n  /**\n   * Verifica status da conexão\n   */\n  getConnectionStatus() {\n    return {\n      isConnected: this.isConnected,\n      deviceName: this.device?.name || null,\n      deviceId: this.device?.id || null,\n      autoReconnect: this.autoReconnect,\n      reconnectAttempts: this.reconnectAttempts\n    };\n  }\n}\n\n// Instância singleton\nconst bluetoothPrinter = new BluetoothPrinterService();\n\nexport default bluetoothPrinter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}