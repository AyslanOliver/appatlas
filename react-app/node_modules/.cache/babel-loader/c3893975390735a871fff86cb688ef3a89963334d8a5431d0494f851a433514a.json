{"ast":null,"code":"import axios from 'axios';\n\n// Configuração da API - função que retorna a URL baseada no ambiente atual\nfunction getApiUrl() {\n  console.log('=== DEBUG getApiUrl ===');\n\n  // Detectar o ambiente baseado no hostname\n  if (typeof window !== 'undefined') {\n    const hostname = window.location.hostname;\n    const protocol = window.location.protocol;\n    console.log('Hostname:', hostname);\n    console.log('Protocol:', protocol);\n\n    // Para desenvolvimento local, usar servidor local Node.js\n    const isLocal = hostname === 'localhost' || hostname === '127.0.0.1';\n    if (isLocal) {\n      console.log('Ambiente detectado: Local');\n      const apiUrl = 'http://localhost:3001';\n      console.log('URL da API retornada:', apiUrl);\n      return apiUrl;\n    }\n  }\n\n  // Para todos os outros casos, usar servidor Node.js local\n  // Nota: Como não há API PHP no InfinityFree, usar sempre o servidor local\n  console.log('Ambiente detectado: Produção (usando servidor local)');\n  const apiUrl = 'http://localhost:3001';\n  console.log('URL da API retornada:', apiUrl);\n  return apiUrl;\n}\n\n// Configuração do axios\nconst API_URL = getApiUrl();\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 15000,\n  // Aumentado para InfinityFree\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Debug: Log da configuração da API\nconsole.log('API_URL configurado:', API_URL);\nif (typeof window !== 'undefined') {\n  console.log('Protocolo atual:', window.location.protocol);\n  console.log('Hostname atual:', window.location.hostname);\n  const isLocal = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n  console.log('Ambiente detectado:', isLocal ? 'Local' : 'InfinityFree');\n}\n\n// Função para testar a conexão com a API\nexport const testarConexao = async () => {\n  try {\n    const response = await api.get('/api/test');\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao testar conexão:', error);\n    throw error;\n  }\n};\n\n// Funções para gerenciamento de produtos\nexport const getProdutos = async () => {\n  try {\n    const response = await api.get('/api/produtos.php');\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar produtos:', error);\n    throw error;\n  }\n};\nexport const criarProduto = async dados => {\n  try {\n    const response = await api.post('/api/produtos.php', dados);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao criar produto:', error);\n    throw error;\n  }\n};\nexport const atualizarProduto = async (id, dados) => {\n  try {\n    // Workaround para InfinityFree: usar POST urlencoded com _method=PUT e query parameter\n    const params = new URLSearchParams();\n    Object.entries(dados || {}).forEach(([k, v]) => params.append(k, v));\n    params.append('_method', 'PUT');\n    const response = await api.post(`/api/produtos.php?id=${id}`, params, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao atualizar produto:', error);\n    throw error;\n  }\n};\nexport const deletarProduto = async id => {\n  try {\n    // Workaround para InfinityFree: usar POST urlencoded com _method=DELETE e query parameter\n    const params = new URLSearchParams();\n    params.append('_method', 'DELETE');\n    const response = await api.post(`/api/produtos.php?id=${id}`, params, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao deletar produto:', error);\n    throw error;\n  }\n};\n\n// Funções para gerenciamento de pedidos\nexport const getPedidos = async () => {\n  try {\n    const response = await api.get('/api/pedidos.php');\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar pedidos:', error);\n    throw error;\n  }\n};\nexport const getPedidoById = async id => {\n  try {\n    const response = await api.get(`/api/pedidos.php?id=${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar pedido:', error);\n    throw error;\n  }\n};\nexport const criarPedido = async pedido => {\n  try {\n    const response = await api.post('/api/pedidos.php', pedido);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao criar pedido:', error);\n    throw error;\n  }\n};\nexport const atualizarPedido = async (id, dados) => {\n  try {\n    // Workaround para InfinityFree: usar POST urlencoded com _method=PUT e query parameter\n    const params = new URLSearchParams();\n    Object.entries(dados || {}).forEach(([k, v]) => params.append(k, v));\n    params.append('_method', 'PUT');\n    const response = await api.post(`/api/pedidos.php?id=${id}`, params, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao atualizar pedido:', error);\n    throw error;\n  }\n};\nexport const deletarPedido = async id => {\n  try {\n    // Workaround para InfinityFree: usar POST urlencoded com _method=DELETE e query parameter\n    const params = new URLSearchParams();\n    params.append('_method', 'DELETE');\n    const response = await api.post(`/api/pedidos.php?id=${id}`, params, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao deletar pedido:', error);\n    throw error;\n  }\n};\nexport const deletarTodosPedidos = async () => {\n  try {\n    // Workaround para InfinityFree: usar POST urlencoded com _method=DELETE\n    const params = new URLSearchParams();\n    params.append('_method', 'DELETE');\n    params.append('deleteAll', 'true');\n    const response = await api.post('/api/pedidos.php', params, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao deletar todos os pedidos:', error);\n    throw error;\n  }\n};\nexport const getCardapio = async (tipo = '') => {\n  try {\n    const url = tipo ? `/api/cardapio.php?tipo=${tipo}` : '/api/cardapio.php';\n    const response = await api.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar cardápio:', error);\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","getApiUrl","console","log","window","hostname","location","protocol","isLocal","apiUrl","API_URL","api","create","baseURL","timeout","headers","testarConexao","response","get","data","error","getProdutos","criarProduto","dados","post","atualizarProduto","id","params","URLSearchParams","Object","entries","forEach","k","v","append","deletarProduto","getPedidos","getPedidoById","criarPedido","pedido","atualizarPedido","deletarPedido","deletarTodosPedidos","getCardapio","tipo","url"],"sources":["E:/appatlas/react-app/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuração da API - função que retorna a URL baseada no ambiente atual\nfunction getApiUrl() {\n    console.log('=== DEBUG getApiUrl ===');\n    \n    // Detectar o ambiente baseado no hostname\n    if (typeof window !== 'undefined') {\n        const hostname = window.location.hostname;\n        const protocol = window.location.protocol;\n        \n        console.log('Hostname:', hostname);\n        console.log('Protocol:', protocol);\n        \n        // Para desenvolvimento local, usar servidor local Node.js\n        const isLocal = hostname === 'localhost' || hostname === '127.0.0.1';\n        if (isLocal) {\n            console.log('Ambiente detectado: Local');\n            const apiUrl = 'http://localhost:3001';\n            console.log('URL da API retornada:', apiUrl);\n            return apiUrl;\n        }\n    }\n    \n    // Para todos os outros casos, usar servidor Node.js local\n    // Nota: Como não há API PHP no InfinityFree, usar sempre o servidor local\n    console.log('Ambiente detectado: Produção (usando servidor local)');\n    const apiUrl = 'http://localhost:3001';\n    console.log('URL da API retornada:', apiUrl);\n    return apiUrl;\n}\n\n// Configuração do axios\nconst API_URL = getApiUrl();\nconst api = axios.create({\n    baseURL: API_URL,\n    timeout: 15000, // Aumentado para InfinityFree\n    headers: {\n        'Content-Type': 'application/json',\n    }\n});\n\n// Debug: Log da configuração da API\nconsole.log('API_URL configurado:', API_URL);\nif (typeof window !== 'undefined') {\n    console.log('Protocolo atual:', window.location.protocol);\n    console.log('Hostname atual:', window.location.hostname);\n    const isLocal = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n    console.log('Ambiente detectado:', isLocal ? 'Local' : 'InfinityFree');\n}\n\n// Função para testar a conexão com a API\nexport const testarConexao = async () => {\n    try {\n        const response = await api.get('/api/test');\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao testar conexão:', error);\n        throw error;\n    }\n};\n\n// Funções para gerenciamento de produtos\nexport const getProdutos = async () => {\n    try {\n        const response = await api.get('/api/produtos.php');\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao buscar produtos:', error);\n        throw error;\n    }\n};\n\nexport const criarProduto = async (dados) => {\n    try {\n        const response = await api.post('/api/produtos.php', dados);\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao criar produto:', error);\n        throw error;\n    }\n};\n\nexport const atualizarProduto = async (id, dados) => {\n    try {\n        // Workaround para InfinityFree: usar POST urlencoded com _method=PUT e query parameter\n        const params = new URLSearchParams();\n        Object.entries(dados || {}).forEach(([k, v]) => params.append(k, v));\n        params.append('_method', 'PUT');\n        const response = await api.post(`/api/produtos.php?id=${id}`, params, {\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao atualizar produto:', error);\n        throw error;\n    }\n};\n\nexport const deletarProduto = async (id) => {\n    try {\n        // Workaround para InfinityFree: usar POST urlencoded com _method=DELETE e query parameter\n        const params = new URLSearchParams();\n        params.append('_method', 'DELETE');\n        const response = await api.post(`/api/produtos.php?id=${id}`, params, {\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao deletar produto:', error);\n        throw error;\n    }\n};\n\n// Funções para gerenciamento de pedidos\nexport const getPedidos = async () => {\n    try {\n        const response = await api.get('/api/pedidos.php');\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao buscar pedidos:', error);\n        throw error;\n    }\n};\n\nexport const getPedidoById = async (id) => {\n    try {\n        const response = await api.get(`/api/pedidos.php?id=${id}`);\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao buscar pedido:', error);\n        throw error;\n    }\n};\n\nexport const criarPedido = async (pedido) => {\n    try {\n        const response = await api.post('/api/pedidos.php', pedido);\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao criar pedido:', error);\n        throw error;\n    }\n};\n\nexport const atualizarPedido = async (id, dados) => {\n    try {\n        // Workaround para InfinityFree: usar POST urlencoded com _method=PUT e query parameter\n        const params = new URLSearchParams();\n        Object.entries(dados || {}).forEach(([k, v]) => params.append(k, v));\n        params.append('_method', 'PUT');\n        const response = await api.post(`/api/pedidos.php?id=${id}`, params, {\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao atualizar pedido:', error);\n        throw error;\n    }\n};\n\nexport const deletarPedido = async (id) => {\n    try {\n        // Workaround para InfinityFree: usar POST urlencoded com _method=DELETE e query parameter\n        const params = new URLSearchParams();\n        params.append('_method', 'DELETE');\n        const response = await api.post(`/api/pedidos.php?id=${id}`, params, {\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao deletar pedido:', error);\n        throw error;\n    }\n};\n\nexport const deletarTodosPedidos = async () => {\n    try {\n        // Workaround para InfinityFree: usar POST urlencoded com _method=DELETE\n        const params = new URLSearchParams();\n        params.append('_method', 'DELETE');\n        params.append('deleteAll', 'true');\n        const response = await api.post('/api/pedidos.php', params, {\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao deletar todos os pedidos:', error);\n        throw error;\n    }\n};\n\nexport const getCardapio = async (tipo = '') => {\n    try {\n        const url = tipo ? `/api/cardapio.php?tipo=${tipo}` : '/api/cardapio.php';\n        const response = await api.get(url);\n        return response.data;\n    } catch (error) {\n        console.error('Erro ao buscar cardápio:', error);\n        throw error;\n    }\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,SAASC,SAASA,CAAA,EAAG;EACjBC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;;EAEtC;EACA,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAMC,QAAQ,GAAGD,MAAM,CAACE,QAAQ,CAACD,QAAQ;IACzC,MAAME,QAAQ,GAAGH,MAAM,CAACE,QAAQ,CAACC,QAAQ;IAEzCL,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEE,QAAQ,CAAC;IAClCH,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEI,QAAQ,CAAC;;IAElC;IACA,MAAMC,OAAO,GAAGH,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,WAAW;IACpE,IAAIG,OAAO,EAAE;MACTN,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MACxC,MAAMM,MAAM,GAAG,uBAAuB;MACtCP,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEM,MAAM,CAAC;MAC5C,OAAOA,MAAM;IACjB;EACJ;;EAEA;EACA;EACAP,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;EACnE,MAAMM,MAAM,GAAG,uBAAuB;EACtCP,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEM,MAAM,CAAC;EAC5C,OAAOA,MAAM;AACjB;;AAEA;AACA,MAAMC,OAAO,GAAGT,SAAS,CAAC,CAAC;AAC3B,MAAMU,GAAG,GAAGX,KAAK,CAACY,MAAM,CAAC;EACrBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAb,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEO,OAAO,CAAC;AAC5C,IAAI,OAAON,MAAM,KAAK,WAAW,EAAE;EAC/BF,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,MAAM,CAACE,QAAQ,CAACC,QAAQ,CAAC;EACzDL,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEC,MAAM,CAACE,QAAQ,CAACD,QAAQ,CAAC;EACxD,MAAMG,OAAO,GAAGJ,MAAM,CAACE,QAAQ,CAACD,QAAQ,KAAK,WAAW,IAAID,MAAM,CAACE,QAAQ,CAACD,QAAQ,KAAK,WAAW;EACpGH,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEK,OAAO,GAAG,OAAO,GAAG,cAAc,CAAC;AAC1E;;AAEA;AACA,OAAO,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,WAAW,CAAC;IAC3C,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACA,MAAMJ,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,mBAAmB,CAAC;IACnD,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAOC,KAAK,IAAK;EACzC,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMN,GAAG,CAACa,IAAI,CAAC,mBAAmB,EAAED,KAAK,CAAC;IAC3D,OAAON,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMK,gBAAgB,GAAG,MAAAA,CAAOC,EAAE,EAAEH,KAAK,KAAK;EACjD,IAAI;IACA;IACA,MAAMI,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCC,MAAM,CAACC,OAAO,CAACP,KAAK,IAAI,CAAC,CAAC,CAAC,CAACQ,OAAO,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAKN,MAAM,CAACO,MAAM,CAACF,CAAC,EAAEC,CAAC,CAAC,CAAC;IACpEN,MAAM,CAACO,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC;IAC/B,MAAMjB,QAAQ,GAAG,MAAMN,GAAG,CAACa,IAAI,CAAC,wBAAwBE,EAAE,EAAE,EAAEC,MAAM,EAAE;MAClEZ,OAAO,EAAE;QAAE,cAAc,EAAE;MAAoC;IACnE,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMe,cAAc,GAAG,MAAOT,EAAE,IAAK;EACxC,IAAI;IACA;IACA,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCD,MAAM,CAACO,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC;IAClC,MAAMjB,QAAQ,GAAG,MAAMN,GAAG,CAACa,IAAI,CAAC,wBAAwBE,EAAE,EAAE,EAAEC,MAAM,EAAE;MAClEZ,OAAO,EAAE;QAAE,cAAc,EAAE;MAAoC;IACnE,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMgB,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACA,MAAMnB,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,kBAAkB,CAAC;IAClD,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMiB,aAAa,GAAG,MAAOX,EAAE,IAAK;EACvC,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,uBAAuBQ,EAAE,EAAE,CAAC;IAC3D,OAAOT,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMkB,WAAW,GAAG,MAAOC,MAAM,IAAK;EACzC,IAAI;IACA,MAAMtB,QAAQ,GAAG,MAAMN,GAAG,CAACa,IAAI,CAAC,kBAAkB,EAAEe,MAAM,CAAC;IAC3D,OAAOtB,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMoB,eAAe,GAAG,MAAAA,CAAOd,EAAE,EAAEH,KAAK,KAAK;EAChD,IAAI;IACA;IACA,MAAMI,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCC,MAAM,CAACC,OAAO,CAACP,KAAK,IAAI,CAAC,CAAC,CAAC,CAACQ,OAAO,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAKN,MAAM,CAACO,MAAM,CAACF,CAAC,EAAEC,CAAC,CAAC,CAAC;IACpEN,MAAM,CAACO,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC;IAC/B,MAAMjB,QAAQ,GAAG,MAAMN,GAAG,CAACa,IAAI,CAAC,uBAAuBE,EAAE,EAAE,EAAEC,MAAM,EAAE;MACjEZ,OAAO,EAAE;QAAE,cAAc,EAAE;MAAoC;IACnE,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMqB,aAAa,GAAG,MAAOf,EAAE,IAAK;EACvC,IAAI;IACA;IACA,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCD,MAAM,CAACO,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC;IAClC,MAAMjB,QAAQ,GAAG,MAAMN,GAAG,CAACa,IAAI,CAAC,uBAAuBE,EAAE,EAAE,EAAEC,MAAM,EAAE;MACjEZ,OAAO,EAAE;QAAE,cAAc,EAAE;MAAoC;IACnE,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMsB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACA;IACA,MAAMf,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCD,MAAM,CAACO,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC;IAClCP,MAAM,CAACO,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC;IAClC,MAAMjB,QAAQ,GAAG,MAAMN,GAAG,CAACa,IAAI,CAAC,kBAAkB,EAAEG,MAAM,EAAE;MACxDZ,OAAO,EAAE;QAAE,cAAc,EAAE;MAAoC;IACnE,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMuB,WAAW,GAAG,MAAAA,CAAOC,IAAI,GAAG,EAAE,KAAK;EAC5C,IAAI;IACA,MAAMC,GAAG,GAAGD,IAAI,GAAG,0BAA0BA,IAAI,EAAE,GAAG,mBAAmB;IACzE,MAAM3B,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC2B,GAAG,CAAC;IACnC,OAAO5B,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,eAAeT,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}