{"ast":null,"code":"/**\n * Classe para impressão via Bluetooth em impressoras POS58\n * Funciona tanto em navegadores (Web Bluetooth API) quanto em Android (Cordova)\n */\nclass BluetoothPrinter {\n  constructor() {\n    this.device = null;\n    this.characteristic = null;\n    this.isConnected = false;\n    this.isAndroid = this.detectAndroid();\n\n    // UUID padrão para impressoras POS (Serial Port Profile)\n    this.SERVICE_UUID = '00001101-0000-1000-8000-00805f9b34fb';\n    this.CHARACTERISTIC_UUID = '00001101-0000-1000-8000-00805f9b34fb';\n  }\n\n  /**\n   * Detecta se está rodando em ambiente Android\n   */\n  detectAndroid() {\n    return window.cordova !== undefined || window.device && window.device.platform === 'Android' || navigator.userAgent.toLowerCase().indexOf('android') > -1;\n  }\n\n  /**\n   * Verifica se Bluetooth está disponível\n   */\n  async isBluetoothAvailable() {\n    if (this.isAndroid) {\n      return new Promise(resolve => {\n        if (window.bluetoothSerial) {\n          window.bluetoothSerial.isEnabled(() => resolve(true), () => resolve(false));\n        } else {\n          resolve(false);\n        }\n      });\n    } else {\n      // Web Bluetooth API\n      if (!navigator.bluetooth) {\n        return false;\n      }\n      try {\n        return await navigator.bluetooth.getAvailability();\n      } catch (error) {\n        console.error('Erro ao verificar Bluetooth:', error);\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Solicita permissão e conecta à impressora\n   */\n  async connect() {\n    try {\n      if (!(await this.isBluetoothAvailable())) {\n        throw new Error('Bluetooth não está disponível ou habilitado');\n      }\n      if (this.isAndroid) {\n        return await this.connectAndroid();\n      } else {\n        return await this.connectWeb();\n      }\n    } catch (error) {\n      console.error('Erro ao conectar:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Conecta via Web Bluetooth API (navegador)\n   */\n  async connectWeb() {\n    try {\n      console.log('Conectando via Web Bluetooth...');\n\n      // Solicita dispositivo Bluetooth\n      this.device = await navigator.bluetooth.requestDevice({\n        filters: [{\n          services: [this.SERVICE_UUID]\n        }, {\n          namePrefix: 'POS'\n        }, {\n          namePrefix: 'Printer'\n        }, {\n          namePrefix: 'BT'\n        }],\n        optionalServices: [this.SERVICE_UUID]\n      });\n      console.log('Dispositivo selecionado:', this.device.name);\n\n      // Conecta ao GATT server\n      const server = await this.device.gatt.connect();\n      console.log('Conectado ao GATT server');\n\n      // Obtém o serviço\n      const service = await server.getPrimaryService(this.SERVICE_UUID);\n      console.log('Serviço obtido');\n\n      // Obtém a característica\n      this.characteristic = await service.getCharacteristic(this.CHARACTERISTIC_UUID);\n      console.log('Característica obtida');\n      this.isConnected = true;\n      return {\n        success: true,\n        message: `Conectado à ${this.device.name}`\n      };\n    } catch (error) {\n      console.error('Erro na conexão Web Bluetooth:', error);\n\n      // Tratamento específico para diferentes tipos de erro\n      if (error.name === 'NotFoundError' && error.message.includes('User cancelled')) {\n        throw new Error('Seleção de dispositivo cancelada pelo usuário');\n      } else if (error.name === 'NotFoundError') {\n        throw new Error('Nenhuma impressora encontrada. Verifique se está ligada e pareada.');\n      } else if (error.name === 'NotAllowedError') {\n        throw new Error('Permissão negada. Verifique as configurações do navegador.');\n      } else if (error.name === 'NotSupportedError') {\n        throw new Error('Bluetooth não suportado neste navegador.');\n      } else if (error.name === 'NetworkError') {\n        throw new Error('Erro de conexão. Verifique se a impressora está próxima.');\n      } else {\n        throw new Error(`Erro ao conectar: ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * Conecta via Cordova Bluetooth Serial (Android)\n   */\n  async connectAndroid() {\n    return new Promise((resolve, reject) => {\n      console.log('Conectando via Cordova Bluetooth...');\n\n      // Lista dispositivos pareados\n      window.bluetoothSerial.list(devices => {\n        console.log('Dispositivos encontrados:', devices);\n\n        // Procura por impressoras conhecidas\n        const printer = devices.find(device => device.name && (device.name.toLowerCase().includes('pos') || device.name.toLowerCase().includes('printer') || device.name.toLowerCase().includes('bt')));\n        if (!printer) {\n          reject(new Error('Nenhuma impressora encontrada. Certifique-se de que a impressora está pareada.'));\n          return;\n        }\n\n        // Conecta à impressora\n        window.bluetoothSerial.connect(printer.address, () => {\n          console.log('Conectado à impressora:', printer.name);\n          this.device = printer;\n          this.isConnected = true;\n          resolve({\n            success: true,\n            message: `Conectado à ${printer.name}`\n          });\n        }, error => {\n          console.error('Erro ao conectar:', error);\n          reject(new Error(`Erro ao conectar à ${printer.name}: ${error}`));\n        });\n      }, error => {\n        console.error('Erro ao listar dispositivos:', error);\n        reject(new Error('Erro ao buscar dispositivos Bluetooth'));\n      });\n    });\n  }\n\n  /**\n   * Desconecta da impressora\n   */\n  async disconnect() {\n    try {\n      if (!this.isConnected) {\n        return {\n          success: true,\n          message: 'Já desconectado'\n        };\n      }\n      if (this.isAndroid) {\n        return new Promise(resolve => {\n          window.bluetoothSerial.disconnect(() => {\n            this.isConnected = false;\n            this.device = null;\n            resolve({\n              success: true,\n              message: 'Desconectado com sucesso'\n            });\n          }, error => {\n            console.error('Erro ao desconectar:', error);\n            resolve({\n              success: false,\n              message: 'Erro ao desconectar'\n            });\n          });\n        });\n      } else {\n        if (this.device && this.device.gatt.connected) {\n          this.device.gatt.disconnect();\n        }\n        this.isConnected = false;\n        this.device = null;\n        this.characteristic = null;\n        return {\n          success: true,\n          message: 'Desconectado com sucesso'\n        };\n      }\n    } catch (error) {\n      console.error('Erro ao desconectar:', error);\n      return {\n        success: false,\n        message: 'Erro ao desconectar'\n      };\n    }\n  }\n\n  /**\n   * Envia dados para a impressora\n   */\n  async sendData(data) {\n    if (!this.isConnected) {\n      throw new Error('Impressora não conectada');\n    }\n    try {\n      if (this.isAndroid) {\n        return await this.sendDataAndroid(data);\n      } else {\n        return await this.sendDataWeb(data);\n      }\n    } catch (error) {\n      console.error('Erro ao enviar dados:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Envia dados via Web Bluetooth\n   */\n  async sendDataWeb(data) {\n    try {\n      const encoder = new TextEncoder();\n      const dataArray = encoder.encode(data);\n      await this.characteristic.writeValue(dataArray);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Erro ao enviar dados via Web Bluetooth:', error);\n      throw new Error(`Erro ao imprimir: ${error.message}`);\n    }\n  }\n\n  /**\n   * Envia dados via Cordova Bluetooth\n   */\n  async sendDataAndroid(data) {\n    return new Promise((resolve, reject) => {\n      window.bluetoothSerial.write(data, () => {\n        resolve({\n          success: true\n        });\n      }, error => {\n        console.error('Erro ao enviar dados via Cordova:', error);\n        reject(new Error(`Erro ao imprimir: ${error}`));\n      });\n    });\n  }\n\n  /**\n   * Comandos ESC/POS para impressora POS58\n   */\n  getESCPOSCommands() {\n    return {\n      // Comandos básicos\n      ESC: '\\x1B',\n      GS: '\\x1D',\n      // Inicialização\n      INIT: '\\x1B\\x40',\n      // Alimentação de papel\n      LF: '\\x0A',\n      CR: '\\x0D',\n      FF: '\\x0C',\n      // Corte de papel\n      CUT: '\\x1D\\x56\\x00',\n      PARTIAL_CUT: '\\x1D\\x56\\x01',\n      // Alinhamento\n      ALIGN_LEFT: '\\x1B\\x61\\x00',\n      ALIGN_CENTER: '\\x1B\\x61\\x01',\n      ALIGN_RIGHT: '\\x1B\\x61\\x02',\n      // Formatação de texto\n      BOLD_ON: '\\x1B\\x45\\x01',\n      BOLD_OFF: '\\x1B\\x45\\x00',\n      UNDERLINE_ON: '\\x1B\\x2D\\x01',\n      UNDERLINE_OFF: '\\x1B\\x2D\\x00',\n      // Tamanho da fonte\n      FONT_SIZE_NORMAL: '\\x1D\\x21\\x00',\n      FONT_SIZE_DOUBLE_HEIGHT: '\\x1D\\x21\\x01',\n      FONT_SIZE_DOUBLE_WIDTH: '\\x1D\\x21\\x10',\n      FONT_SIZE_DOUBLE: '\\x1D\\x21\\x11',\n      // Densidade\n      DENSITY_0: '\\x1D\\x7C\\x00',\n      DENSITY_1: '\\x1D\\x7C\\x01',\n      DENSITY_2: '\\x1D\\x7C\\x02',\n      DENSITY_3: '\\x1D\\x7C\\x03',\n      DENSITY_4: '\\x1D\\x7C\\x04',\n      DENSITY_5: '\\x1D\\x7C\\x05',\n      DENSITY_6: '\\x1D\\x7C\\x06',\n      DENSITY_7: '\\x1D\\x7C\\x07'\n    };\n  }\n\n  /**\n   * Imprime texto simples\n   */\n  async printText(text, options = {}) {\n    const commands = this.getESCPOSCommands();\n    let output = commands.INIT;\n\n    // Aplicar formatação\n    if (options.align === 'center') output += commands.ALIGN_CENTER;else if (options.align === 'right') output += commands.ALIGN_RIGHT;else output += commands.ALIGN_LEFT;\n    if (options.bold) output += commands.BOLD_ON;\n    if (options.underline) output += commands.UNDERLINE_ON;\n    if (options.fontSize === 'large') output += commands.FONT_SIZE_DOUBLE;else if (options.fontSize === 'medium') output += commands.FONT_SIZE_DOUBLE_HEIGHT;else output += commands.FONT_SIZE_NORMAL;\n\n    // Adicionar texto\n    output += text;\n\n    // Resetar formatação\n    if (options.bold) output += commands.BOLD_OFF;\n    if (options.underline) output += commands.UNDERLINE_OFF;\n    output += commands.FONT_SIZE_NORMAL;\n    output += commands.ALIGN_LEFT;\n\n    // Quebra de linha\n    if (options.newLine !== false) output += commands.LF;\n    return await this.sendData(output);\n  }\n\n  /**\n   * Imprime linha separadora\n   */\n  async printSeparator(char = '-', length = 32) {\n    const separator = char.repeat(length);\n    return await this.printText(separator, {\n      align: 'center'\n    });\n  }\n\n  /**\n   * Alimenta papel e corta\n   */\n  async feedAndCut(lines = 3) {\n    const commands = this.getESCPOSCommands();\n    let output = commands.LF.repeat(lines) + commands.CUT;\n    return await this.sendData(output);\n  }\n}\nexport default BluetoothPrinter;","map":{"version":3,"names":["BluetoothPrinter","constructor","device","characteristic","isConnected","isAndroid","detectAndroid","SERVICE_UUID","CHARACTERISTIC_UUID","window","cordova","undefined","platform","navigator","userAgent","toLowerCase","indexOf","isBluetoothAvailable","Promise","resolve","bluetoothSerial","isEnabled","bluetooth","getAvailability","error","console","connect","Error","connectAndroid","connectWeb","log","requestDevice","filters","services","namePrefix","optionalServices","name","server","gatt","service","getPrimaryService","getCharacteristic","success","message","includes","reject","list","devices","printer","find","address","disconnect","connected","sendData","data","sendDataAndroid","sendDataWeb","encoder","TextEncoder","dataArray","encode","writeValue","write","getESCPOSCommands","ESC","GS","INIT","LF","CR","FF","CUT","PARTIAL_CUT","ALIGN_LEFT","ALIGN_CENTER","ALIGN_RIGHT","BOLD_ON","BOLD_OFF","UNDERLINE_ON","UNDERLINE_OFF","FONT_SIZE_NORMAL","FONT_SIZE_DOUBLE_HEIGHT","FONT_SIZE_DOUBLE_WIDTH","FONT_SIZE_DOUBLE","DENSITY_0","DENSITY_1","DENSITY_2","DENSITY_3","DENSITY_4","DENSITY_5","DENSITY_6","DENSITY_7","printText","text","options","commands","output","align","bold","underline","fontSize","newLine","printSeparator","char","length","separator","repeat","feedAndCut","lines"],"sources":["E:/appatlas/react-app/src/services/bluetoothPrinter.js"],"sourcesContent":["/**\n * Classe para impressão via Bluetooth em impressoras POS58\n * Funciona tanto em navegadores (Web Bluetooth API) quanto em Android (Cordova)\n */\nclass BluetoothPrinter {\n    constructor() {\n        this.device = null;\n        this.characteristic = null;\n        this.isConnected = false;\n        this.isAndroid = this.detectAndroid();\n        \n        // UUID padrão para impressoras POS (Serial Port Profile)\n        this.SERVICE_UUID = '00001101-0000-1000-8000-00805f9b34fb';\n        this.CHARACTERISTIC_UUID = '00001101-0000-1000-8000-00805f9b34fb';\n    }\n\n    /**\n     * Detecta se está rodando em ambiente Android\n     */\n    detectAndroid() {\n        return window.cordova !== undefined || \n               (window.device && window.device.platform === 'Android') ||\n               navigator.userAgent.toLowerCase().indexOf('android') > -1;\n    }\n\n    /**\n     * Verifica se Bluetooth está disponível\n     */\n    async isBluetoothAvailable() {\n        if (this.isAndroid) {\n            return new Promise((resolve) => {\n                if (window.bluetoothSerial) {\n                    window.bluetoothSerial.isEnabled(\n                        () => resolve(true),\n                        () => resolve(false)\n                    );\n                } else {\n                    resolve(false);\n                }\n            });\n        } else {\n            // Web Bluetooth API\n            if (!navigator.bluetooth) {\n                return false;\n            }\n            try {\n                return await navigator.bluetooth.getAvailability();\n            } catch (error) {\n                console.error('Erro ao verificar Bluetooth:', error);\n                return false;\n            }\n        }\n    }\n\n    /**\n     * Solicita permissão e conecta à impressora\n     */\n    async connect() {\n        try {\n            if (!await this.isBluetoothAvailable()) {\n                throw new Error('Bluetooth não está disponível ou habilitado');\n            }\n\n            if (this.isAndroid) {\n                return await this.connectAndroid();\n            } else {\n                return await this.connectWeb();\n            }\n        } catch (error) {\n            console.error('Erro ao conectar:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Conecta via Web Bluetooth API (navegador)\n     */\n    async connectWeb() {\n        try {\n            console.log('Conectando via Web Bluetooth...');\n            \n            // Solicita dispositivo Bluetooth\n            this.device = await navigator.bluetooth.requestDevice({\n                filters: [\n                    { services: [this.SERVICE_UUID] },\n                    { namePrefix: 'POS' },\n                    { namePrefix: 'Printer' },\n                    { namePrefix: 'BT' }\n                ],\n                optionalServices: [this.SERVICE_UUID]\n            });\n\n            console.log('Dispositivo selecionado:', this.device.name);\n\n            // Conecta ao GATT server\n            const server = await this.device.gatt.connect();\n            console.log('Conectado ao GATT server');\n\n            // Obtém o serviço\n            const service = await server.getPrimaryService(this.SERVICE_UUID);\n            console.log('Serviço obtido');\n\n            // Obtém a característica\n            this.characteristic = await service.getCharacteristic(this.CHARACTERISTIC_UUID);\n            console.log('Característica obtida');\n\n            this.isConnected = true;\n            return { success: true, message: `Conectado à ${this.device.name}` };\n\n        } catch (error) {\n            console.error('Erro na conexão Web Bluetooth:', error);\n            \n            // Tratamento específico para diferentes tipos de erro\n            if (error.name === 'NotFoundError' && error.message.includes('User cancelled')) {\n                throw new Error('Seleção de dispositivo cancelada pelo usuário');\n            } else if (error.name === 'NotFoundError') {\n                throw new Error('Nenhuma impressora encontrada. Verifique se está ligada e pareada.');\n            } else if (error.name === 'NotAllowedError') {\n                throw new Error('Permissão negada. Verifique as configurações do navegador.');\n            } else if (error.name === 'NotSupportedError') {\n                throw new Error('Bluetooth não suportado neste navegador.');\n            } else if (error.name === 'NetworkError') {\n                throw new Error('Erro de conexão. Verifique se a impressora está próxima.');\n            } else {\n                throw new Error(`Erro ao conectar: ${error.message}`);\n            }\n        }\n    }\n\n    /**\n     * Conecta via Cordova Bluetooth Serial (Android)\n     */\n    async connectAndroid() {\n        return new Promise((resolve, reject) => {\n            console.log('Conectando via Cordova Bluetooth...');\n\n            // Lista dispositivos pareados\n            window.bluetoothSerial.list(\n                (devices) => {\n                    console.log('Dispositivos encontrados:', devices);\n                    \n                    // Procura por impressoras conhecidas\n                    const printer = devices.find(device => \n                        device.name && (\n                            device.name.toLowerCase().includes('pos') ||\n                            device.name.toLowerCase().includes('printer') ||\n                            device.name.toLowerCase().includes('bt')\n                        )\n                    );\n\n                    if (!printer) {\n                        reject(new Error('Nenhuma impressora encontrada. Certifique-se de que a impressora está pareada.'));\n                        return;\n                    }\n\n                    // Conecta à impressora\n                    window.bluetoothSerial.connect(\n                        printer.address,\n                        () => {\n                            console.log('Conectado à impressora:', printer.name);\n                            this.device = printer;\n                            this.isConnected = true;\n                            resolve({ \n                                success: true, \n                                message: `Conectado à ${printer.name}` \n                            });\n                        },\n                        (error) => {\n                            console.error('Erro ao conectar:', error);\n                            reject(new Error(`Erro ao conectar à ${printer.name}: ${error}`));\n                        }\n                    );\n                },\n                (error) => {\n                    console.error('Erro ao listar dispositivos:', error);\n                    reject(new Error('Erro ao buscar dispositivos Bluetooth'));\n                }\n            );\n        });\n    }\n\n    /**\n     * Desconecta da impressora\n     */\n    async disconnect() {\n        try {\n            if (!this.isConnected) {\n                return { success: true, message: 'Já desconectado' };\n            }\n\n            if (this.isAndroid) {\n                return new Promise((resolve) => {\n                    window.bluetoothSerial.disconnect(\n                        () => {\n                            this.isConnected = false;\n                            this.device = null;\n                            resolve({ success: true, message: 'Desconectado com sucesso' });\n                        },\n                        (error) => {\n                            console.error('Erro ao desconectar:', error);\n                            resolve({ success: false, message: 'Erro ao desconectar' });\n                        }\n                    );\n                });\n            } else {\n                if (this.device && this.device.gatt.connected) {\n                    this.device.gatt.disconnect();\n                }\n                this.isConnected = false;\n                this.device = null;\n                this.characteristic = null;\n                return { success: true, message: 'Desconectado com sucesso' };\n            }\n        } catch (error) {\n            console.error('Erro ao desconectar:', error);\n            return { success: false, message: 'Erro ao desconectar' };\n        }\n    }\n\n    /**\n     * Envia dados para a impressora\n     */\n    async sendData(data) {\n        if (!this.isConnected) {\n            throw new Error('Impressora não conectada');\n        }\n\n        try {\n            if (this.isAndroid) {\n                return await this.sendDataAndroid(data);\n            } else {\n                return await this.sendDataWeb(data);\n            }\n        } catch (error) {\n            console.error('Erro ao enviar dados:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Envia dados via Web Bluetooth\n     */\n    async sendDataWeb(data) {\n        try {\n            const encoder = new TextEncoder();\n            const dataArray = encoder.encode(data);\n            await this.characteristic.writeValue(dataArray);\n            return { success: true };\n        } catch (error) {\n            console.error('Erro ao enviar dados via Web Bluetooth:', error);\n            throw new Error(`Erro ao imprimir: ${error.message}`);\n        }\n    }\n\n    /**\n     * Envia dados via Cordova Bluetooth\n     */\n    async sendDataAndroid(data) {\n        return new Promise((resolve, reject) => {\n            window.bluetoothSerial.write(\n                data,\n                () => {\n                    resolve({ success: true });\n                },\n                (error) => {\n                    console.error('Erro ao enviar dados via Cordova:', error);\n                    reject(new Error(`Erro ao imprimir: ${error}`));\n                }\n            );\n        });\n    }\n\n    /**\n     * Comandos ESC/POS para impressora POS58\n     */\n    getESCPOSCommands() {\n        return {\n            // Comandos básicos\n            ESC: '\\x1B',\n            GS: '\\x1D',\n            \n            // Inicialização\n            INIT: '\\x1B\\x40',\n            \n            // Alimentação de papel\n            LF: '\\x0A',\n            CR: '\\x0D',\n            FF: '\\x0C',\n            \n            // Corte de papel\n            CUT: '\\x1D\\x56\\x00',\n            PARTIAL_CUT: '\\x1D\\x56\\x01',\n            \n            // Alinhamento\n            ALIGN_LEFT: '\\x1B\\x61\\x00',\n            ALIGN_CENTER: '\\x1B\\x61\\x01',\n            ALIGN_RIGHT: '\\x1B\\x61\\x02',\n            \n            // Formatação de texto\n            BOLD_ON: '\\x1B\\x45\\x01',\n            BOLD_OFF: '\\x1B\\x45\\x00',\n            UNDERLINE_ON: '\\x1B\\x2D\\x01',\n            UNDERLINE_OFF: '\\x1B\\x2D\\x00',\n            \n            // Tamanho da fonte\n            FONT_SIZE_NORMAL: '\\x1D\\x21\\x00',\n            FONT_SIZE_DOUBLE_HEIGHT: '\\x1D\\x21\\x01',\n            FONT_SIZE_DOUBLE_WIDTH: '\\x1D\\x21\\x10',\n            FONT_SIZE_DOUBLE: '\\x1D\\x21\\x11',\n            \n            // Densidade\n            DENSITY_0: '\\x1D\\x7C\\x00',\n            DENSITY_1: '\\x1D\\x7C\\x01',\n            DENSITY_2: '\\x1D\\x7C\\x02',\n            DENSITY_3: '\\x1D\\x7C\\x03',\n            DENSITY_4: '\\x1D\\x7C\\x04',\n            DENSITY_5: '\\x1D\\x7C\\x05',\n            DENSITY_6: '\\x1D\\x7C\\x06',\n            DENSITY_7: '\\x1D\\x7C\\x07'\n        };\n    }\n\n    /**\n     * Imprime texto simples\n     */\n    async printText(text, options = {}) {\n        const commands = this.getESCPOSCommands();\n        let output = commands.INIT;\n\n        // Aplicar formatação\n        if (options.align === 'center') output += commands.ALIGN_CENTER;\n        else if (options.align === 'right') output += commands.ALIGN_RIGHT;\n        else output += commands.ALIGN_LEFT;\n\n        if (options.bold) output += commands.BOLD_ON;\n        if (options.underline) output += commands.UNDERLINE_ON;\n\n        if (options.fontSize === 'large') output += commands.FONT_SIZE_DOUBLE;\n        else if (options.fontSize === 'medium') output += commands.FONT_SIZE_DOUBLE_HEIGHT;\n        else output += commands.FONT_SIZE_NORMAL;\n\n        // Adicionar texto\n        output += text;\n\n        // Resetar formatação\n        if (options.bold) output += commands.BOLD_OFF;\n        if (options.underline) output += commands.UNDERLINE_OFF;\n        output += commands.FONT_SIZE_NORMAL;\n        output += commands.ALIGN_LEFT;\n\n        // Quebra de linha\n        if (options.newLine !== false) output += commands.LF;\n\n        return await this.sendData(output);\n    }\n\n    /**\n     * Imprime linha separadora\n     */\n    async printSeparator(char = '-', length = 32) {\n        const separator = char.repeat(length);\n        return await this.printText(separator, { align: 'center' });\n    }\n\n    /**\n     * Alimenta papel e corta\n     */\n    async feedAndCut(lines = 3) {\n        const commands = this.getESCPOSCommands();\n        let output = commands.LF.repeat(lines) + commands.CUT;\n        return await this.sendData(output);\n    }\n}\n\nexport default BluetoothPrinter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}